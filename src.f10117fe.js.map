{"version":3,"sources":["../../src/Errors.ts","../../src/HttpClient.ts","../../src/ILogger.ts","../../src/Loggers.ts","../../src/Utils.ts","node_modules/base64-js/index.js","node_modules/ieee754/index.js","node_modules/isarray/index.js","node_modules/buffer/index.js","../../src/NodeHttpClient.ts","../../src/XhrHttpClient.ts","../../src/DefaultHttpClient.ts","../../src/TextMessageFormat.ts","../../src/HandshakeProtocol.ts","../../src/IHubProtocol.ts","../../src/HubConnection.ts","../../src/ITransport.ts","../../src/AbortController.ts","../../src/LongPollingTransport.ts","../../src/ServerSentEventsTransport.ts","../../src/WebSocketTransport.ts","../../src/HttpConnection.ts","../../src/JsonHubProtocol.ts","../../src/HubConnectionBuilder.ts","../../src/index.ts","src/networking.ts","src/index.ts"],"names":[],"mappings":"AKAA,ACAA,ACAA;AFCA,ACAA,ACAA;AFCA,AGFA,AFEA,ACAA;AFCA,AGFA,AFEA,ACAA;AFCA,AGFA,AFEA,ACAA;AFCA,AGFA,AFEA,ACAA;AOLA,AZAA,AcAA,AXMA,AGFA,AFEA,AoBNA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;ATAA,ANGA,AXHA,ACAA,AoBGA,ANAA,AQAA,ATFA,AZAA,AcAA,AMEA,AnBHA,AeGA,ACCA,APJA,AQIA,AVDA,ALIA,AGFA,AFEA;AWNA,AjBAA,AaEA,AZFA,ACEA,AcAA,AbFA,AMKA,AGLA,APOA,AGFA,AFEA,AoBDA,IAAI,mBAAmB,GAAa,EAApC;ATJA,ANCA,AUGA,ANFA,AQDA,ATEA,AQFA,AJAA,ACCA,APFA,AQEA,AVDA,ALKA,AGFA,AFEA;AWLA,AJAA,ACGA,AZHA,AcAA,AbCA,AMEA,AJGA,AGFA,AFEA,AoBDA,IZFY,KYEH,MZFT,QYEA,CAAwB,KAAxB,EAAuC;ATJvC,ANCA,AUEA,ANFA,AQGA,APJA,AMAA,AnBCA,AeAA,ACCA,APHA,AQGA,AVFA,ALMA,AGFA,AFEA,AoBDE,EAAA,EVLU,AbCZ,KuBIS,CAAC,GAAR,CvBJF,AuBIc,OVLd,aUKE,EAAkC,KAAlC;ATHF,AJPA,AVMA,AMEA,AGHA,ARDA,ACQA,AGFA,AFEA,AoBDE,EAAA,EdNF,GcMO,GAAG,KAAK,CAAC,KdNhB,CcMU,CAAa,UAAC,CAAD,EAAE;AfJzB,AENA,AQQA,ANDA,AQEA,ATHA,AQDA,AnBAA,AeCA,ACPA,APKA,AQLA,AVAA,ALaA,AGFA,AFEA,AoBF8B,CZJ9B,UAAY,AYIkB,CvBL9B,AuBK+B,KAAK,KZJpC,EAAuB,KYIyB,CAAC,OAAb,CAAqB,MAArB,CAAN;ATH9B,AHAI,AZAJ,AcHA,AbKI,AMDJ,AURA,APIA,ARAA,AgBJA,AVAA,ALaA,AGFA,AFEA,AoBHgE,CVNhE,EUMU,CxBHE,AwBGV,OVNU,AbKR,CDFJ,AUHA,STKI,GAAA,CAAwB,GaL5B,EAA6B;ACI7B,ANTA,AEiBA,AQPA,ANVA,AQWA,ATFI,AEHA,AMCJ,AnBKI,AeJJ,ANHA,APUA,AGFA,AFEA,AoBHE,EZHE,EGAJ,ESGM,KdPN,AcOW,EZHP,CAAA,AYGU,EAAZ,GTHF,MHAI,CAAA,EFJJ,GAAA,CAiBC,MEbG,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;AGAJ,ANRA,AEiBA,AEjBA,ADSI,AEHA,AbMA,AMbJ,ALAA,ACgBA,AGFA,AFEA,EUTI,EHWJ,eGXI,CAAA,CHWJ,gBGXI,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;ACEJ,AJSA,AQPA,AEXA,ArBQA,AcAI,AMRJ,AJAA,ATCA,AGQkB,ARRlB,ACgBA,AGFA,AFEA,AoBHE,CxBNF,CUCkB,IcKZ,KxBNM,AwBMD,CTLX,ASKY,MAAN,CxBNN,AUCkB,CAAA,CVDE,EwBMG,CAArB,CdLgB,CcKQ,EdLtB,UAAoB,MAApB,EAAkC;AKAtC,AJSA,AZWA,AsB5BA,ATUI,AZFA,AoBRJ,AJAA,ANSQ,APQR,AGFA,AFEA,AoBHI,EZJA,EYIA,OTNJ,ALCe,CCQf,AaHY,CZJR,AYIS,CZJT,EFDc,MAAH,GECX,AFDuB,CKD3B,AHEI,CYIA,CAAwB,CTN5B,SHEI,CAAA,GAAA,AFDwC,CECxC,AFDyC,CECzC,GAAA,OYIA,EAAoD,EdLhD,CECJ,MYIA,GACE,yBADF;ATLQ,AJQZ,AQNA,APAI,AZFA,AcDA,AMAJ,AnBKW,ASHN,APQL,AGFA,AFEA,AoBFI,ExBPA,AcDA,AbKO,CSLO,CUAZ,KLCM,CfAR,CWQJ,AXRI,CCIO,CAAA,KcJC,CfAR,AcDA,CdCA,AcDA,CCC6B,CdItB,CAAA,GcJC,AKDgB,AnBKjB,CDJP,CWQJ,AXRI,CoBDmC,AnBKnC,EUIJ,AXRI,CW0DH,AX1DG,CWQJ,AXRI,CWSA,CSVJ,CpBCI,CcDA,CAAA,CbKW,IDJX,KCIA,EaLA,AbKgC,CaLhC,GAAA,CAAA,CAAA,EbKA,CaLA,CbKgD,CAC/C,CADM,SaLP;ACEO,AMEX,ArBFI,AcDA,AMCJ,AnBJI,AEaJ,AGFA,AFEA,AoBFG,STPQ,OAAA,GAA+B,IAA/B;AAkBV,AhBCD,AoB9BA,AEcA,ATDI,AFAc,APQlB,AGFA,AFEA,EQRI,AFAc,EXiBlB,AsBhBA,STDI,CAAA,EbiBJ,GWjBkB,CAAA,IWClB,CTDI,AFAc,CEAd,EFAA,UEAA,AFAoB,CEApB,GAAA,CAAA,AFAA,CEAA,CFAiC,EEAjC,YAAA;ADOO,AZUX,AoB7BA,AEaA,ATAI,AZFA,AcDA,AMCJ,AVEQ,APQR,AGFA,AFEA,AoBFE,EbAS,AXRP,AcDA,EMCJ,EIQM,EdNM,EVFR,CAAA,AwBQO,CAAC,CdNK,CAAC,IcMZ,CbAK,AXRP,AcDA,AMCJ,AVEuB,CCMZ,AXRP,AcDA,AJGoB,GcMD,CAArB,EdNgB,AcMQ,CxBRtB,CAAA,CWQO,ADNsB,CCMtB,ADNM,CVFb,AUEQ,CVFR,CAAA,GAAA,AUEoC,CIHpC,CAAA,KdCA,QWQO,EDN8C,CCMrD,ADNsD,EIHtD,CAAA,GAAA,CAAA,CAAA,EHS6B,CGT7B,IJGI,EAAmE,SCMvE,EAAsE,CGTtE;ACEO,AJQH,AZSR,AsBhBA,ArBDI,AcDA,AMAJ,AnBJkB,ASON,APQZ,AGFA,AFEA,AoBFI,ETRO,AdLO,EuBad,KAAK,EbAM,CZSf,AsBhBA,ApBNkB,ASOA,AcMN,CvBbM,GSOI,CKFX,ASQM,CTRN,ASQO,CAAD,CAAb,CvBbc,ASOA,CAAU,ETPU,GcK3B,CAAA,AdL+B,KcK/B,GAAP,EdLkC,EAApB,MSOA,CAAN,CKFR,AJQ6B,KAAlB,CAAwB,IAAI,CAAC,SAAL,CAAe,gBAAf,CAAxB,CAAP;AIPA,AJQH,AZqCD,AsB7CJ,ATCI,AQHJ,AnBIA,ASAS,APQT,AGFA,AFEA,AoBFG,EZPC,CDKO,AaAT,KTNU,CAAC,AdEb,AuBMS,EzBqCL,AsB7CJ,CDFA,CRGI,AYOS,CTRK,AHCd,IYOc,CvBNlB,AuBMmB,ITRX,AhB6CJ,CACoB,CgB9CK,AHCzB,AYOS,CZPT,IYO0B,CHR9B,AGQS,EAAwB,CzBqC7B,AsB7CJ,CAwHC,CtBzEuB,Qa9CpB,CAAA,Cb4CA,EAGoB,Aa/CpB,CAAA,CAAA,GAAA,Eb4CA,EAGkD,ca/ClD;AGAQ,AhB6CY,Aa5CpB,AZFA,AcDA,AMDJ,AnBNA,AEmBA,AGFA,AFEA,AoBFI,CvBjBJ,CDQI,AcDA,CbPJ,CuBiBI,KzBqCoB,AyBrCf,CxBTL,CeCa,AfDb,AoBFJ,CIWe,KAAK,CAAC,CzBqCG,AC9CpB,AcDA,AUUgB,CTRR,AfDR,AcDA,AUUW,EzBqCS,CgB7CK,ASQN,GJXvB,CLGY,EKHZ,CIWe,EzBqCS,CC9CpB,AwBS2B,CxBT3B,GAAA,AcDA,CdCA,AcDA,AUUgC,CxBThC,AwBSiC,CAAD,CAAhC,CxBTA,ScDA,CAAA,GdCA,AcDA,CAAA,CAAA,GAAA,aAAA;AHWO,AZqCa,AsBlBb,ArB5BP,AcDH,AMAG,AVII,APQR,AGFA,AFEA,AoBFG,CVnBH,CHmBW,AUmBA,CPtCC,AUiBH,KdJK,CX2CU,AyBrCf,OdNa,GCMX,AZqCa,AW3CC,CCMd,AGnBkB,EfwDL,AsBlBb,CAAA,CXzBmB,CAAC,ICMpB,CAAA,ADNc,CAAY,CX2Cb,AsBlBb,CAAA,eXzB2C,CWyB3C,AXzB4C,GCM5C,AUmBP,CPtCQ,EHmBR,OUmBwB,EXzBH,CCMS,ADN1B,ICMJ,AUmBA,CPtCyB,CHmBc,AUmBY,EPtC1B,EAAA,CAA7B;ACWY,AJSJ,AZqCgB,AsBlBhB,AT3BJ,AEDJ,AMDoB,AVIZ,APQR,AGFA,AFEA,AoBFI,EZRA,EFEI,AcMJ,IbAQ,CZqCY,AqB/CJ,AIUX,CTTO,ELGA,AcMD,CZRX,AQFgB,AVIH,CEFb,CGDiB,AM4BT,CtBkBY,AqB/CW,AVI3B,CcMY,CAAC,CzBqCG,GgB9CZ,CJSJ,AaAO,CTTe,ASSH,CHmBnB,AT3BJ,AYQW,CzBqCS,AsBlBD,AT3BnB,CYQ0B,KAAK,CHmB3B,AGnB4B,EHmBJ,GD7BZ,CIUU,GAAe,CAA9B,CHmBP,AT3BJ,CAAA,AYQ4C,GZR5C,CAAA,AYQW,CZRX,AYQiD,GZRjD,CYQW,IAA2C,QAA3C,GACT,EZTF,GYSO,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CADP;ATRY,AjBdhB,AauBQ,AZqCH,Aa7CD,AZFA,AoBAA,AVII,APQR,AGFA,AFEA,AoBAG,ExBZC,MWUQ,EXVR,CAAA,AUIW,EKHM,MJSb,AXVJ,AUII,CKHQ,AfDZ,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AeES,AJSL,AUmBA,ArB7BJ,AUIC,APQL,AGFA,AFEA,GMhBkB,KCcN,AUmBA,QAAQ,CAAC,IVnBb,GUmBY,CAAZ,EAAuB;AN3BtB,AhB6CT,AsBjBY,AT5BR,AEFJ,AMAoB,AjBapB,AGFA,AFEA,AoBDE,EZVE,AYUF,EVZU,Kf+CZ,AqB/CoB,CIYV,CHkBO,AGlBN,EZVP,CAAA,EQFgB,CC8BR,CP9BZ,CMAsC,CC8BZ,AD9BN,CrB+CpB,Ia7CI,AYUF,CZVE,AYUsB,CHkBd,KT5BR,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,KYUF,EAAoD,SAApD,GAAgE,gBAC9D,KAAK,CAAC,MAAN,KAAiB,CAAjB,GAAqB,IAArB,GAA4B,KADkC,IAC7B,GAD6B,GAE5D,KAFJ;ATTG,AjBhBL,AayBQ,AZCR,AsBkBS,AT5BL,AZFA,AoBCA,AVbc,APyBlB,AGFA,AFEA,AoBCC,CzBFD,CCZI,AUZc,CKOP,AhBiBX,CD1BA,CuB0CQ,GVjBI,EXXR,CqB8BW,ArB9BX,EFdJ,MEcI,AUZc,CVYd,AUZc,OVYd,CAAA,GAAA,CAAA,CAAA,CWWsB,EXXtB,EWWQ,CDvBM,GAAsB,CCuBJ,AXXhC,GUZc,ICuByB,MAAP,KAAkB,WAAlB,IAAiC,IAAI,YAAY,MAA7E,EAAsF;AbzB9F,Aa0BY,AUmBA,ArB9BR,AUZc,APyBlB,AGFA,AFEA,EMzBkB,SW0CD,MAAL,EX1CM,CW0CQ,AX1CR,IW0CY,WX1CZ,GAAkB,MW0CV,AX1CgB,CW0CE,AX1CD,OW0CjB,CAAd,IX1CwB,CAAoB,iBAAiB,CAAC,mBAAtC,CAAlB;AKed,AjBlBJ,Aa2BY,AUmBH,AT7BL,AEJJ,AMGoB,AVEpB,APWA,AGFA,AFEA,AoBCA,CVjBA,CCKI,AHDA,EYaE,ITZF,CAAA,AKFgB,AVEpB,CZlBA,Aa2BkB,CGdN,CUiBE,CZbV,CAAA,CYaiC,C1B9BrC,EAAA,Ea2B4B,GITxB,AJS2B,ASXX,CLEZ,CHDJ,AEJJ,CFII,AQDiD,AVErD,CCSmC,AGdT,MFItB,CAAA,GDU2B,ACV3B,CDU0C,ACV1C,CGCI,AHDJ,CGCI,EJSuB,ACV3B,CDUQ,MITR,AHDA,EGCI,EKF4D,IAAhD,ELEhB,EAAU;AjBlBiB,Aa4BnB,ACVX,AZFG,AcFA,AMqGH,AVlHD,AP6BA,AGFA,AFEA,AoBCE,CZ5BF,AFFA,CZD+B,AEgB3B,AwBeF,CZ5BU,AFFZ,MKiBI,CJUc,AXZd,CFhB2B,AEgB3B,CFhB2B,C0B+BlB,CZ5BU,CY4BR,IxBfX,CAAA,CeEA,AjBlB2B,EAAA,Ca4BC,GAAG,Eb5BJ,CAAA,AEgB3B,CAAA,GAAA,CAAA,CAAA,AwBeY,CbH6B,CAAC,CXZ1C,CwBeW,CZ5BH,CY4BkB,GbHK,CAAmB,GXZlD,GYbmB,CY4BR,EZ5BQ,AY4B0B,EZ5B1B,CAAvB,yBDyBwE,mBAArC,CAAvB;AITJ,AjBXJ,ACsDJ,AsBdQ,ArB/BJ,AcFA,AMGA,AZfJ,AL4BA,AGFA,AFEA,AoBCI,EVjBA,ENZJ,IgB6BU,GHgBK,EN7BA,EM6BP,CPjCJ,CCII,ADJJ,ANZJ,OgB6B0B,GAAG,IVjBzB,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,OUiBA;ATZC,AJSO,AUoBP,APjCD,ANbJ,AL6BA,AGFA,AFEA,AoBCI,GHMO,ENrBG,GSeJ,EbJM,aaIS,CbJK,EaIF,GbJO,CAAC,CAAxB,EAA2B,SaInC;Af5BJ,AEyBgB,AXZZ,AQfJ,AL8BA,AGFA,AFEA,AoBEI,ExBjBA,EwBiBA,MxBjBA,AQfJ,CReI,AwBiBO,CAAC,EbLU,CaKlB,ChBhCJ,AgBgCgB,EbLU,AH3B1B,CReI,CeAU,AfAV,GWYkB,CAAU,EXZ5B,CAAA,GAAA,CAAA,AwBiBA,CxBjBA,CwBiB6B,ExBjB7B,EwBiBA,EAAmC,ExBjBnC,OWYkB,CAAN,CaKZ;Af7BJ,AEyBa,AU4CF,ArBxDV,AcFG,ANd+B,AL+BnC,AGFA,AFEA,AoBEI,CxBhCJ,CqBuEW,AP1DP,ANd+B,CRCvB,CSEZ,Ae8BI,GbX0F,CAQlF,GX7BQ,AQDe,CAAA,GgBiCpB,CVnBX,CAAA,CUmBc,Gf9BlB,CYqEW,CAAA,EbxEwB,EAAA,EgBiCN,CAAC,CVnB1B,CO0DO,AP1DP,CO0DO,AbxEwB,CAAA,CRCvB,EwBgCM,CACZ,EHsCK,AP1DP,CAAA,EO0DA,ArBvEgB,CcahB,CAAA,CdbgB,AcahB,EdbgB,CAApB,AcaI,IO0De,CGvCD,EHuCd,AGrCE,CVrBF,CO0D4B,QGrCzB,KAAD,EAAQ,IAAR,EAAc,CHqChB,EAA+F,GGrC7F,EAAoB;ATpBZ,ANZd,AE4BY,AZgCZ,AsBUQ,AP1DP,AXiBD,AGFA,AFEA,AoBIQ,CV1BR,ECKI,ADLQ,CfqDZ,EyB3BQ,OAAO,CzB2Bf,AyB3BgB,CHqCJ,EP/Dc,AU0BlB,CAAY,OHqCZ,CAAe,GAAf,EAAoB,KAApB,CGrCA,EAAiC,KAAjC,EAAwC,CV1BpC,GU0BJ,EAA8C,MAA9C,GV1BkB,GAAA,EAAA,CAA1B;ACSI,ANhBJ,AV4DA,AS5DI,AL8BJ,AGFA,AFEA,AoBIQ,ETlBJ,MAAA,CAAA,CNhBJ,CDAI,EgBkCW,GflCf,EAAA,KMgBI,CAAI,APhBJ,CAAmB,MAAnB,EAAkC,MOgB9B,CAAA,SAAJ,EAAI,QSkBmD,CTlBvD,EAAW,GSkBA,GAAkD,IAAlD,GAAuD,IAAvD,GAA2D,MAAlE;AflC+B,AV4DvC,AsBYQ,AbxEJ,AL+BJ,AGFA,AFEA,AoBIO,EfnCgC,Ge8BrB,CAAd,EhB9BA,COgBA,AMwDS,EZxE0B,CAAA,AV4DvC,AsBYQ,CbxEJ,EawEe,CbvEX,EauEA,CAH2F,CAK3F,CN1DJ,CPfI,CAAA,IAAA,CAAA,CCD+B,EAAA,CDC/B,KCD+B,ADCxB,CCDwB,GDAnC;AOiBI,ANdJ,AXIA,AasBQ,AZ+BZ,AsBeQ,AD1DG,AjBeX,AGFA,AFEA,AoBMI,EJrBO,EIqBP,MbTc,CbtBd,ACqDJ,EgB3Ce,ESqBA,EJrBJ,CLAS,AKAT,AIqBO,E1B/Bd,CAAY,ACqDhB,GY/BgC,AZ+BhC,CAmFC,EgB9HO,AJY2B,ASZxB,CAAA,CIqBkB,CAAC,G1B/B1B,EAAkC,E0B+BpB,CAAoB,GbTW,ASZtC,GTYyC,ASZhD,CtBVA,AasBQ,EbtB4C,M0B+BtC,CJrBO,CIqB8B,IJrBnD,EAAoC,IIqBgB,EJrBpD,EAAmD,CIqBA,EAAQ,MAAR,EAAc;ATpBhE,AJYO,ASZJ,AZhBA,AL+BR,AGFA,AFEA,AoBMM,IhBrCE,COcO,CJcH,AaSN,GhBrCM,CAAC,GgBqCA,CAAC,EhBrCN,CG4Be,AaSjB,CAAY,ChBrCI,CG4BI,KH5BlB,CG4BwB,CAAC,SaS3B,EAAgC,CbTZ,CAAoB,GaSxC,EbToB,AaSmB,CbTO,IAA1B,CaSpB,CbToD,UAAU,CAAC,KAAX,CAAiB,CAAjB,EAAoB,cAApB,CAAhC,CAAd;AACA,AZ4CD,AsBCH,ADzDA,AjBeR,AGFA,AFEA,AoBMM,EzBmCK,IY5CC,EU6CA,ADzDA,IrBwDD,CAAA,AyBnCE,EHoCM,ADzDA,ITYM,CIfV,AKGH,ETYiB,AZ4ClB,CAAA,EqBxDkB,CrBwDlB,GAAP,GY5CmC,CAAC,ASZhC,EAA+B,ECyD3B,EtBDG,GAAX,AsBC0C,CV7CjB,CZ4CD,EY5CyB,IU6C7C,CtBDJ,CsBCoD,CtBDP,MyBnCQ,CbT7B,GAA2C,EaS1D,GAAkD,IAAlD,CbToE,CAAC,CaSd,IbTG,CAAiB,CaS3E,GAA6D,MAApE,IbTiE,EAAiC,MAA5E,GAAqF,IAArG;AF3BR,AXGA,AayBK,AZ4CD,AsBCI,ADzDA,AZjBP,ALgCL,AGFA,AFEA,AoBMK,KbtBG,AamBU,CAAd,E1B/BA,GWHA,AE4BW,AZ4CA,AsBCE,CDzDC,CtBbd,GAAA,ACqEgB,AqBxDE,ItBblB,ACqEW,CAAS,AqBxDN,CAAU,MXhBxB,CAAmB,AVwEC,CAAA,EAAA,AsBCZ,EtBAG,CUzEX,AYyEqC,EZzEH,IVwEd,EACF,csBAV,sBDzDM,CAAN;ALJG,ANZX,AE6BQ,AZ6CA,AsBAH,ADzDA,AZhBL,AL+BJ,AGFA,AFEA,AoBOI,GT3BA,CS2BA,CHiCI,CtBEI,EU1ER,EE6Bc,CU6CH,CtBAG,AyBnCN,CfvCR,AeuCS,CzBmCO,EUzEZ,EE4BkB,CZ4CJ,EY5Ce,CF5B7B,CAAA,EE4BI,EF5BJ,AesCJ,CftCI,AesCoB,IftCpB,KAAO,EesCX,EfvCA,AeuCqC,SAArC,GAAiD,IAAjD;ATxBJ,AjBXQ,Aa0BI,AZ6CA,AsBAA,AlB1CZ,AGFA,AFEA,AoBOI,IAAA,EzBmCQ,EDvEE,CiBWd,AhB4De,CY7CG,CZ6CH,AsBAE,CGnCL,CAAC,I1BpCU,GAAG,IiBW1B,AJegC,GAAG,AaU/B,CAAwB,E1BpCF,CAAW,CuBuEzB,GV7C+B,AU6CF,CV7CG,Ib1BpC,Ga0B2B,CAAiB,SaUhD,EAAmD,SAAnD,GAA+D,WAA/D,GbVkE,eAAnC,CAAvB;AInCZ,ANQQ,AXEA,ACoEc,AsBGN,ADzDR,AbtBR,AJqCA,AGFA,AFEA,AoBQI,CT/CJ,EAAA,CjBUQ,ASRJ,AiB6CA,CzB8BoB,CAAT,CAAP,CUrEI,AYyEI,ADzDJ,CtBdJ,AsBcK,GtBdL,A0BqCI,CACL,CJxBC,CXhBW,CWgBC,CCyDK,Ad/EzB,CTQQ,CAAA,AuBuEmB,IvBvEnB,CAAA,IAAA,CWFI,AeuCR,C1BrCU,A0BsCU,IfxCc,QXE9B,GWFA,EAA2C,AXExB,IAAnB,gB0BqCJ,EAEG,OAFH,CAEW,UAAC,EAAD,EAAG;AfxCN,AXEJ,AayBI,AZ8CP,AsBFoC,ADvD7B,AZlBD,ALiCX,AGFA,AFEA,AoBUQ,EhB3CG,CTqEA,CDjEH,EWFI,CYuEA,EvBrEA,CAAC,AayBG,CF3BA,CAAC,CWgBE,AIyBX,EJzBI,AZlBD,AgB2CD,ChB3CC,AgB2CA,I1BvCH,EWFI,CXEc,CayBI,CF3BA,ADFnB,CAAA,GCEuB,AE2BC,CAAC,AH7BzB,CG6BC,CacJ,C1BvCA,AayB+B,AH7BnC,AgB2CwB,C1B1C4B,CAKhD,K0BqCA,EAA6B,ChB3CrB,OAAZ,EAAgC,AgB2CE,CAAD,EAAE,EfzCT,CAAkB,MAAlB,CAAlB;AACH,AXID,AauBQ,AU8CP,ADzDA,AbvBT,ACII,ALkCJ,AGFA,AFEA,AoBUU,IjBhDN,CEKI,GDDJ,GCGW,AFPJ,CiBgDK,ChB5CZ,CG8BkB,EH9BlB,EG8BsB,AacJ,EhB5ClB,CAAgC,AgB4CX,ChB3CjB,CG6Bc,AacK,CbdK,AacJ,CjBhDxB,KAA0B,MiBgDL,CAAgB,IjBhDzC,EAA2C,KIkCrB,AacG,CbdT,AacN;AfxCE,AE2BC,AZ4DF,AQ9FP,AJsCJ,AGFA,AFEA,AoBUU,EzB8CC,IUvFC,CEsBG,CAOH,AaYF,GfzCM,CAAC,AVuFN,CAAA,OyB9CD,CAAA,CfzCE,AVuFD,CAAA,EUvFmB,EVuFnB,EUvFuB,CVuF9B,CyB9CM,CAAW,MAAX,EzB8CM,GAAZ,EAAyB,OAAzB,EAA8C,KUvFpB,CAAmB,MAAnB,CAAlB;AACH,AXGD,Aa0BI,AZ0DJ,AsBdA,ADzDA,AbvBJ,AJsCJ,AGFA,AFEA,AoBUS,I1BtCD,G0BmCA,CJtBI,AIsBJ,C1BnCI,CAAC,CCoFE,AsBdA,GDzDG,CCyDV,CtBcY,GDpFZ,AsBae,CrBuER,CAAS,CDpFC,CsBajB,EAAqB,IrBuEL,CAAA,CDpFhB,CCoFgB,EACT,OADS,EACF;AACV,AsBfP,ADzDO,AbvBR,ACGI,ALmCR,AGFA,AFEA,AoBSU,GHiBC,EGvBP,CzBsDQ,AqBxEA,AbvBF,ECGE,IT4FM,AqBxEA,ErBwEE,CqBxEC,AZpBF,CAAC,CDHC,GR8FC,AQ9FE,OAAO,ACGnB,IAAuB,IYoBH,GZpBU,CAAC,IYoB/B,GbvBY,ICGW,CDHoB,ACGA,OAA/C,EAAwD,CDHxC,GAA4C,uBAA5C,GAAsE,OAA1F;ATUC,ACsFO,AsBdR,AD1DK,AbvBL,ACGQ,ALmCZ,AGFA,AFEA,AoBUG,EjBhDC,CiBkBiC,EJPkB,CrBoF3C,AqBtEJ,GrBsEO,EAAA,ES5FI,EDHF,GAAG,ECGM,CAAC,MAAR,CAAe,CDHH,CAAC,ECGM,ODHP,CAA3B,UCG8B,EAAf,CAAP;ACGP,AE6BO,AZ0DU,AQ5FrB,ACGQ,ALmCT,AGFA,AFEA,AoBWE,EAAA,GzB0CsB,CAAT,CAAP,GYzDU,WaeG,EAAE,CbfS,GAAG,cAAc,GAAG,CAAxC,OaeY,KAAD,EAAgB;Af1CnC,AXEJ,Aa0BY,AZ6DP,AIzDL,AGFA,AFEA,AoBWI,GzBwCO,CyBxCP,EbfQ,Gb1BZ,Qa0BuB,Cb1BvB,Ea0B0B,GaeH,GAAG,EbfQ,CAAC,Eae/B,ObfsB,CAAmB,CAAnB,EAAsB,cAAtB,CAAd;AbhDZ,AaiDY,ASXJ,AbvBR,ACGQ,ALmCR,AGFA,AFEA,AoBWI,C1BhEJ,CAA+B,ESe/B,AiBiDI,EbfQ,CbjDZ,CAAA,AsBsCc,AZpBF,CAAC,OYoBS,AZpBF,CAAC,CDHrB,AiBiDkB,CbfO,ASXA,AI0BN,GbfU,CH/BrB,CgB8CU,ChB9CW,AgB8CzB,KbfiC,CAAC,MAAT,GAAkB,cAAnB,ESXe,CTWsB,ISXxC,CAAwB,GTWwB,CAAC,CSXjD,CAAjB,OTWyD,CAAmB,cAAnB,CAArC,GAA0E,IAA1F;AACH,AZ2EE,AQ9GX,ACIY,ALmCZ,AGFA,AFEA,AoBWG,EzB4DQ,CyB/F0B,EbVM,CAgCnC,MZyEG,CAAA,AS1GQ,OAAO,CAAC,CT0GhB,CAAA,IS1GQ,CAAe,CT0GvB,GAAP,AS1GkC,KAAJ,CAAU,IT0G1B,GAAd,EAA2B,OAA3B,EAAgD,ES1GlB,CAAf,CAAP;ACED,AVyGH,AqBtFA,AbzBR,ACKS,ALmCT,AGFA,AFEA,AoBYE,Ef9CS,Ae8CT,MJ3BY,EbzBd,CR+Ge,KAAK,AQ/GpB,CiBoDiB,CjBpDjB,CEMW,AWmBc,AI2BN,Cf9CR,AVyGI,CAAS,CqBtFI,EAApB,KXnBG,AVyGa,CUzGb,AVyGa,EAAA,EUzGb,AV0GI,GU1GX,IVyGoB,EACF,CyB5DF,Gf9CJ,Ce8CG,EAAa,If9C5B,EAAgC;AAC5B,AV0GI,AsB/BD,AdlFyB,AJyCpC,AGFA,AFEA,AoBYI,EH6BO,AdlFyB,EiBqDhC,EzB4DQ,KQjHwB,AiBqDzB,CzB4DO,AQjHkB,AiBqDxB,EzB4DQ,CyB5DhB,CAAY,MzB2DM,AsB9BX,CAAA,GdlFyB,EAAA,IckFzB,CAAA,AG7BP,CjBrDgC,CAAA,AiBqDD,IAA/B,SH6BO,GAAP,UAAuB,QAAvB,EAA6C;AZ1EzC,AXCR,Aa6BQ,AZ4EI,AsB/BJ,ADzDA,AZpBA,ALoCR,AGFA,AFEA,MLwEY,EU1GA,AE8BE,AHhCF,CT4GG,AqBxFe,AZpBjB,ET4GE,EqBxFe,EXlBX,AY2EP,ADzDkB,CXlBV,AE8BE,AHhCF,CAAC,CYoBS,CTYL,ASZK,CZpBtB,CYoBsB,CZpBJ,Ga6ElB,CAAe,CZ3EX,IAAuB,AWkBL,GCyDtB,ADzDsB,ECyDG,EZ3ES,CAAC,GWkBnC,EAAsB,ECyDtB,ADzDsB,GAAA,CXlBK,CAAoB,KE8BZ,EF9BnC,CWkBsB,CXlBkC,AWkBlC,CTYL,CAAwB,ISZzC,EAAsB,EAAA,EAAtB,CTYiB,CAAjB,ASZgC;AXjB5B,AXCZ,ACsGsB,AqBtFT,AbrBT,ACEQ,ALoCZ,AGFA,AFEA,AoBWI,I1B5CJ,CCqGwB,CAAT,CAAP,CyBzDA,EJ5BW,CbrBf,EEIe,ADFA,GVGnB,CsBgB0B,GXjBA,AWiBA,AZnBA,CCEC,ADFA,IDFvB,CAAmB,CEIJ,ADFA,AgB+CQ,Cf7CO,ADFA,AgB+CN,EJ5BF,CAAA,CXjBY,AFJlC,ACEkC,CYmBZ,CAAb,AbrByB,CiBiD9B,CAA4B,ChB/CF,CAAU,EgB+CpC,MAAsC,CAAC,CAA3C,Ef7C8B,Ae6CgB,Ef7C/B,CAAP,EDFsB,CAAf,CAAP;ACGH,AXAT,Aa6BQ,AZ6EH,AsB/BG,AD1DI,AbtBR,ACGK,ALoCT,AGFA,AFEA,AoBWM,GzBuDK,GyBvDL,EbhBQ,AJlCV,CcgFS,CD1DK,GbtBd,GIkCkB,AJjCd,Cc+EA,EV9CiB,CU8CD,Ed/EhB,CIiCqB,ASZE,AbrBvB,CIiCsB,CagBL,CJ5BS,AI4BR,CjBjDlB,Cc+EA,Ad/EA,CIiCiB,CAAW,ASZE,AI4BhC,CJ5BiC,AI4BR,CjBjDvB,GiBiDF,CJ5B4B,CAAW,AbrB9B,CIiC6B,CAAC,CAAD,CAAnB,AJlCrB,CIkCI,ESZ0B,CAAtB;AtBjBZ,ACmHI,AsBvCI,AlBzCR,AGFA,AFEA,AoBWM,MAAA,I1B9CN,CuB4Ee,IAAP,CvB5ER,EAAA,M0B8CwB,CAAC,aAAW,IAAX,GAAe,uBAAhB,CAAlB;Af5CE,AXF0B,Aa8B1B,AU+CH,AD3DO,AbrBJ,ACGA,ALoCR,AGFA,AFEA,AoBWK,E1B/C6B,CuBwEvB,KZtEC,AE4BA,AJjCA,CEKC,CWgBG,CtBlBkB,AUAnB,CVAmB,GSHf,ACGA,CCEC,AE4BA,CF5BC,AE4BA,ASZE,ITYf,CH9BO,CCEP,AE4BmB,AH9Bc,CVAP,CWEL,CXFK,ESHtB,EaqBwB,CAAC,CtBlBH,CAAA,ASHG,ACGK,EYkB1B,KAA8B,AZlBL,EAAU,EDH3C,EAA0C,EaqBtC,AZlB6B,EYkBe,AZlBC;ACG7C,AXER,Aa0BQ,AUgDR,AD5DY,AbrBJ,ACGA,ALoCZ,AGFA,AFEA,UIpCkB,EG8BA,AJjCA,CEKC,ADFE,CYkBC,ETYA,AJjCA,ACGE,EYkBE,EXhBA,ADFE,CCED,AE4BT,AJjCA,CIiCU,AJjCA,CaqBN,CAAU,GXhBb,CAAe,IAAI,EDFd,EAAZ,CCEsB,CAAU,IWgBtB,CAAN,eXhBkB,CAAf,CAAP,KFLM,CAAN,IIiCM,CAAN;AF3BH,AE4BA,ASZI,AbrBJ,ACIG,ALmCZ,AGFA,AFEA,AoBWI,IAAA,EhB9CQ,GAAG,CAAC,IAAJ,CAAS,GgB8CH,CAAC,GhB9CS,CAAC,MAAjB,EAA0B,OAAO,AgB8C3B,ChB9C4B,AgB8C1C,GhB9CQ,EAAwC,IAAxC;AACA,ALmCZ,AGFA,AFEA,AoBWG,GA7CkC,GhBDzB,GAAG,CAAC,eAAJ,GAAsB,IAAtB;ACCJ,AE4BA,AZuFJ,AqBnGQ,AbpBJ,ACII,ALmCZ,AGFA,AFEA,AoBYE,EAAA,EbnBM,AJhCA,ECII,ECAA,CAAC,AFJD,ACIG,CDJF,ACIG,IYgBI,EXhBA,AFJZ,CEIa,EE4BE,AJhCD,CEId,Ae+CY,Ef/CM,AE4BA,AamBJ,GjBnDd,CCII,CYgBqB,AZhBA,CYgBC,ETY1B,CAtCmC,CAwCnC,ASdI,aZhBA,EAAyC,GgB+C9B,IAAD,EAAa,OhB/CvB,EAL6C,CAM7C;ACAA,AE8BJ,ASdQ,AbpBR,AJuCR,AGFA,AFEA,AoBYI,IjBnDI,AiBmDJ,KjBnDQ,CAAC,GEIM,AWgBE,MbpBb,CEIkB,CAAC,CFJF,AiBmDH,CAAC,If/CJ,CAAe,IAAI,GFJA,CAAC,AiBmDL,Cf/CA,CAAU,CWgBX,AbpBR,CiBmDF,CjBnDf,EiBmD8B,MJ/BtB,MXhBkB,CAAf,CAAP,Oe+CU,CAAlB;Af9CK,AWgBW,AbpBZ,ACII,ALmCZ,AGFA,AFEA,AoBYI,IjBnDI,AiBmDJ,EhB/CQ,GDJA,ACIG,CDJF,ACIG,KYgBS,EbpBjB,GAAe,GiBmDA,GhB/CX,AgB+Cc,ChB/CO,MDJG,CaoBhB,AbpBiB,CaoBQ,MZhBjC,CDJW,CAAuB,ACIG,EgB+CJ,CAAC,EJ/B1B,II+BM,CAA2B,UAAC,CAAD,EAAE,GhB/C3C;AVER,Aa4BI,AZoFG,AsBtCA,AD3DS,AbrB4B,ACMpC,ALkCZ,AGFA,AFEA,AoBW4D,EzBmEjD,AsBtCA,IdhFqC,GAAG,CCMjC,CVAd,Aa4BW,AJlCsC,CIkCrC,AZoFL,CAAA,AyBnEiD,CAAC,EjBnDJ,CAAC,ACMjC,EgB6CyC,ChB7CtC,ETgHjB,AsBtCA,CvB1EP,ACgHO,AsBtCA,AG7BiD,C1B7C5C,Ca4BD,EAAgB,AH5BI,CAAC,Ia0EzB,CAAA,Eb1EC,CVAR,EAAwD,ACgHjD,AsBtCA,GtBsCP,AsBtCA,CV9CW,CAAP,QZoFmB,EsBtCvB,CtBsCA,EAAkC;AUhH9B,AE6BH,AZoFG,AsBtCA,AdjFsC,AJyC9C,AGFA,AFEA,AoBUsE,Gb3D3D,EJQY,AiBmDG,CjBnDlB,AiBmDJ,Kf7CW,AViHA,EAAP,GUjHY,UAAL,CAAgB,IAAhB,CAAqB,OAArB,CAAP;AACH,AViHA,AsBtCG,AD5DQ,AZfJ,ALmCZ,AGFA,AFEA,AoBUI,Gf3DO,AV6HA,CyBlEP,MhB7CY,GYeK,IZfT,CgB6CM,ChB7CO,AgB6CN,mBAAD,CJ9Be,AI8B7B,UJ9BY;AtBhBA,Aa8BhB,AU+CQ,AD5DY,AbtBf,ACOW,ALmChB,AGFA,AFEA,AoBUG,GAnDkC,K1BIrB,AuB6EF,Ab3EE,CG4BhB,KH5BsB,CYeG,AZfF,IAAP,CVFA,AUEY,KVFZ,Ca8BhB,CH5BgB,Ea2EmB,Ab1Ed,CVHL,CAAA,CuB6EsB,CvB7EtB,CsBiBI,CAAyB,CZf7B,Ca2E2B,Ab1Ed,UAAC,CYcV,KZdS,EAAO,Ga0EE,IAA8B,EAA5D,CAHJ,CAKI;AZ5EG,AXHK,AapBhB,AZuIA,AqBjGoB,AZdI,ALkCxB,AGFA,AFEA,AoBWE,CbrEF,CFuBW,Ae8CT,CbrEF,GboBgB,GCmHhB,CS/GwB,GAAG,CAAC,CgB6Cb,EAAE,C1BjDD,CWGL,AVgHX,CUhHW,CXHK,QWGL,CAAA,ADCa,CAAqB,MAArB,EAA6B,CgB6CnC,E1BjDF,E0BiDC,Cf9CN,CDCiD,AgB6C5B,ChB7C6B,CCDzD,Ee8Ca,EAA2B,ChB7CgB,CAApC,ICDG,GAAvB,EAAkC;AAC9B,AXJoD,ACgC5D,AsBgDQ,AdnFG,ACQU,ALkCrB,AGFA,AFEA,AoBWI,CzBlBJ,CQnCW,CRmCX,CyBkBI,IH8BQ,Cb9EI,ECED,Ae8CJ,CAAC,GAAR,Cf9CgB,AFPT,AiBqDK,CjBrDL,SEOI,AFPJ,CEOoB,AFPpB,EcmFsB,CAAC,CdnFvB,EiBqDP,CjBrDA,CiBqD+B,CH8BvB,GG9BR,EH8ByC,CZ5E9B,CAAgC,CFP/B,EEOD,CAAP,GY4EA,EAAgD,GdnFpD,EAAoC;AEQnC,AY4EO,AD9DI,AbtBZ,ACSS,ALkCb,AGFA,AFEA,GKrCW,KFNP,KasBiB,AbtBjB,GAAA,IAAA,mBasB6B,UAAjB;AtBnBZ,AuBkFQ,AD9DQ,AjBqBpB,AGFA,AFEA,AoBUI,MH+BQ,EvBlFR,A0BmDI,K1BnDJ,EsBoBqB,CtBpBrB,IAAA,OuBkF6B,AG/BN,CH+BO,AG/BN,MH+BhB,AD9DQ,CAAyB,AI+BrC,CAA4B,CH+BO,GG/BnC,EH+BwC,IG/BF,CAAC,CH+BnC,AD9DQ,AI+BhB,EAA8C;Af7ClD,AY6ES,AD9DW,AbvBZ,ACUI,ALkCZ,AGFA,AFEA,AoBUM,KHsBF,CAWI,AGjCF,Gf9CN,CDEgB,CDVD,IAAI,ECUI,CAAC,IDVT,CAA0B,EiBsDhB,Cf9CzB,Ae8C0B,IhB5Cd,AgB4CN,CAAyB,ChB5CO,CDVI,EiBsDpC,KjBtDmC,EAAU,MAAV,EAAgB;AE1BzD,AX6BQ,ASDI,ACSI,ALkChB,AGFA,AFEA,AoBUM,CfjFN,CAAuC,IeiFjC,E1BpDQ,AUQE,EDTA,CCSG,CAAC,KVRG,GAAG,CSDd,GE5BZ,ADqCgB,AgB4CQ,CfjFxB,AeiFyB,EhB5CU,GVRT,CAAW,GUQK,CAAC,GgB4CP,E1BpD5B,E0BoDiB,GAAe,EhB5CxB,wBgB4CS,GAA0C,IAA1C,GAA8C,GAA/C,CAAlB;A1BnDE,AsBoBQ,AZZH,ALkCb,AGFA,AFEA,AoBUK,I1BpDG,KAAA,GAAA,CsBoBa,KtBpBb,CAAA,IAAA,CAAA,IAAA,EAAM,SsBoBmB,GtBpBzB,CsBoBQ,ItBpBW,IAAnB,CAFoD,CAIpD;AACA,AuBiFA,AD/DY,AbtBR,AJ4CZ,AGFA,AFEA,QiByCY,CAAC,CdrFG,IcqFE,GAAV,EAAe,iBdrFO,WAAW,CAAC,OAA1B,CAAJ,EAAwC;AcsFxC,AD/DQ,AbtBJ,ACUJ,ALkCZ,AGFA,AFEA,AoBUI,IAAA,IjBtDY,ECUA,Ea2EE,IAAI,Cb3EC,CAAC,AgB4CN,CjBtDS,AiBsDR,EH+BD,CAAU,AdrFE,MAAM,CAAC,ACUzB,EAAyB,EDVP,CAAY,IiBsDxB,CAAd,MjBtDiD,CAAC,OAAxB,CAAd,0DcqFE,CAAN;AvBjFJ,AuBkFC,AdrFI,ACUG,ALkChB,AGFA,AkBYG,GA7DkC,C1BU7B,GSLI,CCYI,CVPJ,CAAC,GSHM,ECUI,CAAC,GVPhB,GAAiB,KUOT,CAAoB,GVP5B,IUOQ,GAA8B,YAAA;AYY9B,AbrBA,ACUI,ALkCpB,AGFA,AkBaE,EAAA,MjBvDc,ECUI,EgB6CR,CJlCS,AZXE,CAAC,AgB6CV,KjBvDa,ACUP,GDVU,WAAW,CAAC,AiBuD3B,IAAD,CJlCmB,CIkCJ,CjBvDC,CiBuDhB,EJlCE,AIkCuB,CjBvDc,EAArC;ATGX,AuBkFG,AD/DY,AbrBP,ACUO,ALkCpB,AGFA,AkBaI,IAAA,IH6BU,Eb1EM,MAAM,CAAC,Ca0EH,GAAG,Ab1EI,CgB6CT,CAAC,EH6BQ,WG7BG,GhB7CP,CgB6CJ,ChB7CG,CAAN,CgB6CkB,YH6BX,CAAmB,KAAK,GAAxB,EAA6B,AG7BjC,GAAuC,EAAvC,GAAyC,GAA1C,CAAlB,SH6BuB,CAAnB;AAEA,ADhEY,AZXH,ALkCjB,AGFA,AkBaI,IAAA,KhBhDY,Ea8ED,YG9BQ,GAAG,cH8BG,KG9BgB,CH8B9B,AG9B+B,CH+BlC,KG/Bc,CAA2B,IH8BtC,EAEH,IGhC0C,CHgCrC,AGhCoC,EAAE,IHgC3C,IAAe,oBAAW,QAFvB,EAGH,KAAK,QAAL,IAAiB,IAAI,gCAAJ,EAHd,CAAP;AvBnFR,AuBuFK,AdxFO,ACUC,ALkCb,AGFA,AkBY4D,GHajD,MvBlEX,CSDkB,GiBsD0C,CAAC,KAAK,E1BrDlE,E0BqD4D,CjBtD5B,GAAG,KAAI,CAAC,OAAL,CAAa,WAAW,CAAC,GAAzB,EAA+B;AThBlE,AsBqCgB,AbpBA,AJ4ChB,AGFA,AkBWsE,C1BtEtE,CAAkC,G0BsER,CAAtB,C1BtEJ,CAAA,ASiBgB,IAAI,EAAE,WAD4C;AcyFlE,ADnEoB,AbpBJ,ACUJ,ALkCZ,AGFA,AkBWI,IAAA,KHkCJ,Cb7EgB,OAAO,CAAC,AgB2CN,CAAC,MhB3CP,EAAqB,Ea6EjC,SGlCkB,CAAd;AHtFJ,ADsDoB,AbpBJ,ACUA,ALkChB,AGFA,AkBWG,CHvFH,EAAA,AGoBqC,KjBcrB,ACUA,EYUI,CZVD,CAAC,IYUM,AbpBF,CaoBG,CbpBD,CCUV,CYUI,CAAW,CZVD,ODVO,ACUA,CDVC,ACUA,OAAtB,EYUwB,GbpBd,KAA6B,GaoBnC,EAAiC,QbpB3B,GAA6C,IAA7C,GAAoD,MAHZ,GauBc,aAAa,CAAC,IAAzC,GAAgD,YAAjF;AACA,AbpBJ,ACUH,ALkCb,AGFA,AkBYE,EAAA,MjBtDc,OAAO,EAAA,IiBsDF,EAAE,EjBtDA,CAAA,0BiBsDC,IAAD,EAAe,OAAf,EAA8B;A1BvDrD,AsBEY,AbAQ,AJ4CpB,AGFA,AkBYI,IAAA,kBAAkB,CAAC,OAAD,EAAU,IAAV,CAAlB;A1BvDJ,ASEoB,ACUR,ALkCZ,AGFA,AkBYG,I1BxDH,EUYY,GAAG,CAAC,IVZhB,EUYY,GAAa,WDVe,CCUf;AVZzB,AuBuFA,ADjEY,AbtBW,ACaP,ALkChB,AGFA,AkB5DqC,CAArC,KJqCY,GCiEZ,AdvFuB,EAGA,CCUH,Ka0EpB,ADjEuB,CCiEL,ADjEM,CZTG,CAAC,EYShB,AbnBsB,CamBL,AbnBM,CcoFnC,EAA6B,IdvFN,CAJ2C,ACiBlD,EAAyB,GYS7B;AtBtBZ,AuBwFI,ADjEK,AblBO,ACSI,ActDpB,AnBwFA,AGFA,QCzCgB,CcmFL,CvBxFX,AUcoB,IDTE,CcmFL,CvBxFjB,AuBwFkB,AdnFM,CCSG,CVd3B,AUc4B,Ca0EjB,KAAe,GdnFS,CAAC,CCShB,CAAoB,Ga0EpC,Cd5F8D,GCkB9C,GAA8B,IAA9B;AVdY,AuByF/B,AdnFe,ACSC,ALkCjB,AGFA,AkBYA,E1B3DgC,E0B2D1B,IjBrDU,GTNgB,CAAA,GSMT,AiBqDN,EjBrDQ,CiBqDL,I1B3DY,EAAA,G0B2D1B,CjBrD8B,CAAC,CTNL,CAAA,O0B2DZ,GAAA;A1BtDhB,AsBoBI,Ab7B0D,AenClE,AnByFA,AGFA,AkBYE,MAAM,CjBhE2B,EAYvB,EaiBG,AImCF,GAAqB,KjBpDrB,GaiBL,AImCkC,CAAC,CjBpD/B,EAAQ,QAAR,EAAkB,AiBoDI,CAAuB,GjBpD7C,EAAsB,QiBoDA,CAAhC;AJlCG,AbjBW,ACQA,ALkChB,AGFA,AkBYE,GJnFS,GImFH,IAAI,EjBpDQ,ACQA,CgB4CL,EhB5CQ,CAAC,EgB4CJ,CAAC,GhB5CD,CDRW,CAAC,AiBoD9B,EhB5CgC,GAAd,IAAqB,EDRzB,CCQ4B,CDRC,ACQA,MAAJ,GAAa,GAAtC,EAA2C;AYWvD,AblBgB,ACQA,AcxDpB,AnB0FA,AGFA,AkBaE,MAAI,IjBrDc,ACQA,AgB6CV,KAAK,EhB7CY,AgB6CrB,ChB7CsB,GDRG,AiBqDV,CjBrDW,ACQA,GgB6CP,KAAK,GjBrDV,CAAwB,KiBqD1C,EjBrDkB,AiBqDqB,GjBrDa,ECQ1B,CAAiB,CDRzB,ECQ4B,CAAC,MAArB,EAA6B,GAAG,CAAC,UAAjC,EAA6C,GAAG,CAAC,QAAJ,IAAgB,GAAG,CAAC,YAAjE,CAAD,CAAP;ADPH,ACQA,ALkCjB,AGFA,AkBcE,EAAA,OhBhDc,KgBgDd,ChB9CqB,AgB8CrB,eAAA,CAAgB,IAAhB;AhB7CkB,AcxDpB,AnB0FA,AGFA,AkBcE,EAAA,QhB9CkB,AgB8CV,CAAC,KhB9Ce,CAAC,IAAI,SgB8C7B,CAA6B,OhB9CJ,CAAc,GAAG,CAAC,AgB8CF,CAAC,OAAb,CAAqB,ChB9CzB,EAA8B,GAAG,AgB8C7B,ChB9C8B,AgB8C3D,EAA2D,IhB9ClC,AgB8CzB,ChB9CwB,CAAN;ADPJ,ACQC,ALkCjB,AGFA,AkBeE,EAAA,KAAK,CAAC,IjBvDY,CiBuDlB,GAAc,CjBvDA,CiBuDd,CjBvDyB;ATJvB,ASKgB,ACQP,AczDb,AnB2FA,AGFA,AkBeC,CAVD,MhB/CY,IVHR,GSKoB,KAAK,CAAC,CTL1B,CAAY,ESKQ,KAAe,KTLnC,EAAuD,ISKvC,EAAgC;AAC5B,AJ0CxB,AGFA,YCxCwB,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,kBAAS,OAAzB,EAAkC,4BAAlC;ACSZ,Ac1DZ,AnB4FA,AGFA,AkBeA,IAAM,EhB/CM,GAAG,CAAC,OAAJ,GAAc,EgB+CF,GAAG,OhB/CD,EgB+CpB,kBAAqB,CAAC,GAAD,EAAc,IAAd,EAA2B;A1B9DtC,AsBwBL,AbjBa,ACSR,ALkChB,AGFA,AkBeE,EJvCS,IIuCH,E1B/DQ,AUgBA,AgB+CN,GAAG,CjBxDW,CCSJ,CAAC,GYQV,CAAA,AbjBmB,CAAC,AiBwDV,C1B/DL,AUgBA,AgB+CM,ChB/CM,EDTO,CCSnB,CVhBA,AUgBgB,EYQrB,CAAA,EtBxBK,CAAA,EAAA,A0B+DH,CAAuB,KAAvB,CJvCF,AIuCT,GJvCE,AbjB2B,ACSU,EDTX,CAAN,ICSR,EAAkC,CYQ1B,OAApB,EAAuC,oBZRmC,GAAG,CAAC,MAAhC,GAAsC,IAAtC,GAA2C,GAAG,CAAC,UAA/C,GAAyD,GAA3F;AVhBA,AsByBR,AbjBa,AelDrB,AnB6FA,AGFA,MRjDgB,KsByBD,OtBzBC,GAAA,oBAAA,OsByBiB,KAAlB,CAAwB,IAAI,CAAC,SAAL,CAAe,OAAf,CAAxB,CAAP;AtBzBmD,AsB0BtD,AZTW,ALmChB,AGFA,AkBeE,GJzCS,GIyCL,EhBhDU,EgBgDd,EAAU,EhBhDU,CAAC,IAAI,iBAAJ,CAAc,GAAG,CAAC,UAAlB,EAA8B,GAAG,CAAC,MAAlC,CAAD,CAAN;ADRI,ACSP,Ac3Db,AnB8FA,AGFA,AkBeI,IAAA,EAAE,ChBnDM,AgBmDL,GjBzDa,KAAI,CAAC,AiByDrB,GAAe,GjBzDC,CAAY,GAAZ,CAAgB,KiByDN,IAAX,GAAe,MjBzDW,OAAzB,AiByDD,EjBzDmC,CiByDN,GAA5C,0BjBzD8E,KAA9D;ATThB,AsB4BQ,AjB0BZ,AGFA,AkBeG,EJvCS,CIqCV,K1BjEE,C0BmEK,I1BnEL,GAAA,CsB4BQ,CAAA,EtB5BR,OsB4BQ,CAAA,mBAAA,GAAR,UAA4B,OAA5B,EAAsD;AAClD,AbnBY,ACUR,Ac3DZ,AnB8FA,AGFA,AkBeI,IAAA,EhBhDQ,AgBgDN,CAAC,EJvCM,AZTE,CDVK,ACUJ,MDVU,AiB0DtB,CjB1DuB,ECUf,AgBgDO,GjB1DO,ACUE,AgBgDxB,CjB1DgB,MamBZ,CAA0B,IZTN,GYSa,CAAC,MAAlC,EAA0C,yCAA1C;AtB5BA,ASUY,ACUJ,ALmChB,AGFA,AkBeG,Q1BpEW,AUoBE,KAAI,CAAC,GVpBE,GAAG,AUoBV,CAAY,GAAZ,CAAgB,KVpBN,CAAW,SAA7B,GUoBiC,OAAzB,EAAkC,4BAAlC;AVnBR,AsB6BA,AbnBS,AelDjB,AnB+FA,AGFA,IRrDQ,IsB6BI,CtB7BJ,GAAA,GsB6BW,CAAC,EtB7BZ,CAAA,IAAA,CAAA,IAAA,AsB6BI,EtB7BE,GsB6BuB,StB7B7B,AsB6BA,EAAwC,GtB7BrB,IAAnB,CAFmD,CAInD;AACA,AsB2BI,AZVI,ALoChB,AGFA,AkBeE,EAAA,MhBjDc,EgBiDN,CJvCO,AIuCN,GhBjDW,CAAC,IAAI,MgBiDzB,CAAwB,KJvCd,CAA0B,IIuCpC,EAAoC,CJvCO,AZVtB,CYUuB,CZVxB,CAAN,EgBiDd,CAA2C,EAA3C,KJvCU,EAAgD,yCAAhD;AACH,AbnBO,ACSH,AcjFb,AnBqHA,AGFA,AkBeE,EAAA,EAAE,CAAC,EhBpDO,KDNQ,OiB0DlB,CjB1D0B,CAAC,UAAT,IAAuB,GAAvB,IAA8B,QAAQ,CAAC,UAAT,GAAsB,GAAxD,EAA6D;ATRrE,AsB4BH,AbnBe,AexEpB,AnBqHA,AGFA,AkBeC,CAXD,EJlCY,CtBtBJ,KAAI,CAAC,ASSO,OAAO,CAAC,CTTpB,GAAiB,ASSO,STTxB,eSSoB,CAAiB,QAAQ,CAAC,UAA1B,EAAsC,QAAQ,CAAC,aAAT,IAA0B,EAAhE,EAAoE,IAApE,CAAD,CAAP;AACH,ACSL,AchFZ,AnBoHA,AGFA,MElCY,GDXI,ACWD,CAAC,IAAJ,CDTW,ACSF,OAAO,CAAC,OAAR,IAAmB,EAA5B;AVlBP,AsB6BO,AbnBQ,ACSX,ALoCT,AGFA,AkBeA,EJvCY,GZjEG,CAAP,AgBwGF,CAAC,GjB1Da,MAAM,CamBd,AbnBe,CamBf,GbnBmB,EiB0D/B,CAAwB,GJvCZ,CAAA,UbnBe,CAAc,GiB0DzC,EAA4C,GJvChC,AbnBqC,CAAC,EamB9C,MIuCwC,IJvCZ,CbnBS,IAA0B,EamB/D,AbnBuB,EamB+B,AbnBa,QAAQ,CAAC,UAAT,IAAuB,CAAnE,CAAD,CAAN;AaoBZ,AbnBS,ACSZ,AcjFL,AnBqHA,AGFA,AkBeE,GhBtHS,GgBsHL,GJvCO,CIuCH,GAAG,YAAY,CAAC,GJvClB,CAA0B,GIuCrB,CAAqB,GJvCO,CAAC,EIuC7B,CAAX,SJvCM,EAAgD,yCAAhD;AtB7BR,ASWa,AexEN,AnBqHP,AGFA,IgBnHa,GfwCsB,CAAvB,CTqBZ,EwB7DoB,GAAW,KxB6D/B,EwB7DO;AxB4CP,AsBgDQ,AZXR,ALqCA,AGFA,AkBcE,C1BtFF,CAAgC,I0BsF1B,C1BtFN,A0BsFO,C1BtFP,AsBgDY,CZXZ,EgBiDE,EAAW,EJtCM,CAAC,IAAR,EZXZ,GYW6B,SAArB,EAAgC;AAC5B,AbnBA,ACxEZ,ALqHA,AGFA,AkBcI,ChBjIJ,CAAmC,EgBiI/B,IAAI,EjBzDQ,CiByDL,CJtCO,IAAI,CIsCL,CAAC,GJtCA,AbnBS,CamBC,AbnBA,ECxE5B,CAAA,QDwEY,EAA6B,MiByDxB,CAAb,qBJtCc,CAAN;AACH,AbnBO,AJ6ChB,AGFA,AkBcI,IAAA,IjBzDY,QiByDA,CAAC,EjBzDU,CAAC,IiByDxB,CAAqB,MjBzDT,AiByDZ,CjBzDoC,CiByDP,IAA7B,EjBzDY,GAAkC,YAAA;AaoB7C,AbnBe,AJ6CpB,AGFA,AkBcG,GJ5CS,ObbQ,cAAc,CAAC,KAAf;AACA,AJ6CpB,AGFA,UC3CoB,MAAM,CAAC,IAAI,kBAAJ,EAAD,CAAN;AaoBR,AbnBK,AJ6CjB,AGFA,AkBaE,EJrCU,AIqCV,OjB3Dc,KiB2Dd,CAAA,EJrCU,CAAA,IIqCV,CAAQ,IJrCE,AIqCV,CJrCU,CIqCI,QAAd,UJrCU,GAAR,UAA4B,OAA5B,EAAsD;AAClD,AbnBK,AJ6Cb,AGFA,AkBcE,EAAA,MJtCU,EIsCF,CAAC,IJtCQ,CAAC,MAAR,GIsCV,CJtC4B,AIsCJ,MAAxB,CJtCmC,CAAC,AIsCJ,KJtC1B,EAAqC,SIsC3C,CAAiD,OAAjD,EAA0D,WAA1D;AJrCU,AbnBH,AJ6CT,AGFA,AkBcE,EAAA,GjB1Ga,CAAP,IiB0GE,CAAC,CJtCO,IAAI,KAAJ,CAAU,KIsC1B,CAA0B,UAA1B,EAAsC,UAAC,CAAD,EAAE,UJtCxB,CAAN;AACH,AbnBJ,AJ6CL,AGFA,AkBcI,GjB5GO,KiB4GH,CAAC,CAAC,IAAF,KAAW,OAAf,EAAwB;ArBX5B,AGFA,AkBcM,MAAA,WAAW;AJrCT,AbnBG,AJ6CX,AGFA,AkBcK,EjBzDM,MamBC,CAAC,OAAO,AbnBT,CamBU,AbnBV,MamBC,GbnBD,CamBoB,AbnBpB,OamB2B,CAAC,KAA/B,EAAsC,AbnBnC,GAAP,UAAuB,GAAvB,EAAkC;AaoB1B,AbnBJ,AJ6CR,AGFA,AkBcG,GAJD,QJlCe,AbnBF,KAAK,SAAL,CAAe,KamBlB,CAA0B,OAAO,CAAC,CbnB/B,CAA+B,GamBlC,AbnBG,CAAP,CamB6C,yCAAzC;AACH,AbnBJ,AJ6CL,AGFA,AkBcC,CAdD,EjB7CW;AJgDX,AGFA;AcvBQ,AbpBR,AJ8CA,AGFA,ScxBa,AbpBb,cAAA,MaoBQ,CAA0B,OAAO,CAAC,YAAlC,EAAgD,yCAAhD;AACH,Ab7FL,AJuHA,AGFA,CCrHA,CAAoC,CamFxB,qBbnFZ,CAAA;AJwHA,AGFA;AcvBY,AjB0BZ,AGFA,EcxBY,eAAA,CAAA,SAAA,CAAA,oBAAA,GAAR,UAA6B,KAA7B,EAAyC,YAAzC,EAA6D;AACzD,AjB0BR,AGFA,QcxBY,OAAO,KAAP,KAAiB,QAAjB,IAA6B,KAAK,KAAK,EAA3C,EAA+C;AAC3C,AjB0BZ,AGFA,YcxBkB,IAAI,KAAJ,CAAU,YAAV,CAAN;AACH,AjB0BT,AGFA;AcvBK,AjB0BL,AGFA,Gc5BY;AjB+BZ,AGFA;AcxBA,AjB2BA,AGFA,SczBA,eAAA;AA3GA,AjBuIA,AGFA,CcrIA,EAAA;AjBwIA,AGFA;AHGA,AGFA;AHGA,AGFA;AHGA,AGFA;AW5IA,ACAA,Af+IA,AGFA;AW5IA,ACAA,AZ6IA,IW7IA,ACAA,kBAAA,ODAA;AJAA,AIAA,ACAA,AZ8IA,IO9IM,qBAAqB,GAAW,KAAK,IAA3C;AACA,AIDA,AfFA,AgBEA,AZ+IA,IO9IM,QIDN,ACAA,mBLCiC,GAAW,KAAK,IAAjD;AAEA,AGHA,ACYI,AfbJ,AgBYI,AZqIJ,IJjJA,GAAA,IeaI,ACDA,kBAAA,CAAY,MDCZ,CAAY,GCDZ,EAAoC,KDCpC,EAAoC,WCDpC,EAAsG,KDCtG,CCDA,CDCsG,CCA1F,KDAZ,EACY,UCFZ,EACwC,KDAxC,EACwC,aCFxC,EACkF,ODAlF,EACsF;AAClF,AffR,AgBcQ,AZoIR,SWnIa,ACDA,MAAL,GAAc,CDCd,GAAkB,ECDlB,QDCA;AJVR,AGHA,ACcQ,AfhBR,AgBeQ,AZoIR,IO9IY,KIWC,ACDA,GhBfb,UWKA,KIWQ,ACDA,GDC0B,ACDA,kBDC1B,ACDA;AFZR,ACcQ,AfjBR,AgBgBQ,AZoIR,IUjJA,KCca,ACDA,EhBhBb,GAAA,CeiBQ,EfjBR,CeiBsB,AfJrB,McVD,ACcQ,ECDA,GAAyB,iBAAzB;ACWR,AHxBA,ACeQ,ACDA,AZoIR,Ia1HM,KFTO,ACDA,QCUM,GAAG,GAAtB,GFTQ,GAAyB,ACDzB,GAA4B,cDC5B,MCDA;ACYR,ANxBA,AGFA,ACgBQ,AflBU,AgBiBV,AZoIR,COjJA,CXJkB,EiB4Bd,CjB5Bc,CAAA,GekBL,ACDA,ELbD,CGFZ,IdFkB,GiB4BC,AjB5Bf,AgBiBI,GCWmB,ADXD,ICW1B,GNxBA,AXJ6B,EWIC,AIctB,CflBJ,AgBiBI,EDC8B,AflBC,IAAnC,EAA+C,gBekB3C;AEWR,ANxBI,AGiBA,ACFI,AfnBA,AgBkBA,AZmIR,IazHI,IjB5BQ,CemBC,ACDA,EFGT,AdrBW,KAAK,EemBZ,ACDA,EhBlBI,CiB4BS,AFTI,ACDA,GCUI,AjB5BD,CemBpB,ACDA,EhBlBuB,CiB4B/B,GHPI,CAAY,AdrBoB,SAA5B,CcqBJ,CdrB2C,CcqBP,kBAApC,EAAsG,MAAtG,EAAuH,iBAAvH,EAAiJ;AHhBjJ,AGiBI,ACFA,AfnBI,AgBkBJ,AZmIR,EOjJI,OGiBS,ACFA,ACDA,GhBlBK,IemBV,AfnBc,AgBkBd,GFGA,ACFe,ACDA,CLdnB,CAAA,AXJc,CcqBQ,AdrBE,CemBpB,ACDA,SFGA,AdrB4B,IAAR,GWIxB,AXJoC,CWIpC,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CXJc,CAAN,YWIR;AMwBJ,ANvBI,AGiBI,ACFH,AfnBI,AgBkBJ,AZmIL,Ia1HI,KHNS,EGMF,MAAP,KAAkB,KHNd,GAA0B,GGM9B,IAAiC,OAAO,IHNpC,GGM6B,KAAmB,WAAxD,EAAqE;AACjE,AHNI,AdrBH,AIqJL,GJzJkB,McyBL,MAAL,GAAc,MAAd;AGOJ,ANxBA,AGkBI,ACFS,ACDA,AZmIjB,EOlJI,AIgBa,ACDA,OFGJ,SAAL,EHlBJ,AKea,CLfb,AGkBqB,AEHR,IFGY,ECFZ,CAAA,ECDA,CAAA,MDCA,CAAA,ACDA,CLfb,CAAA,CKeA,IDCa,GAAb,GJhBA,AKeqB,CLfrB,EKeA,CLfA,CAAA,AKekC,CLflC,AGkBqB,CCFA,CDEjB,CHlBJ,CIgBA,EAAkC,OCDlC,CLfA,CKegE,KDChE,EAAgE;AEShE,ANxBH,AGkBO,AdrBU,AIqJlB,COvJA,CXEkB,CWFN,EXEM,CiB2BR,AjB3BQ,GcqBL,CdrBK,GAAd,IiB2BiB,GAAG,CN7BM,EXEP,GcqBf,AdrBJ,CiB2B2B,CjB3BE,CcqBA,KdrB7B,EAA0C,IAA1C,EAAsD,IiB2BlC,AHNhB,KGM+C,IN7B3C,MM6BY,GAA4C,SN7BtC,GAAA,EAAA,CAA9B,QM6BwB,GAAsE,OAA1F;AACA,ANvBJ,AGkBQ,AdtBA,AIqJR,Ea1HI,OHLS,OAAL,CGKW,EHLI,CGKD,IHLd,OGKyB,CAAC,IAAD,CAA7B;AACA,AHJI,AdvBA,AIqJR,Ea1HI,MjB3BQ,CcuBC,CdvBC,GAAG,IAAI,CcuBb,CGIa,EHJI,CGID,CjB3BZ,CAAJ,CcuBA,CdvBsB,OiB2BK,CAAC,aAAD,CAA/B;AACH,AHJO,AdvBI,AIqJZ,SU9Ha,GdvBK,IcuBV,AdvBc,GcuBC,EdvBL,CAAU,CcuBpB,YdvB+B,IAAX,GAAe,UAAf,GAA0B,GAA1B,GAA6B,GAAvC,CAAN;AiB6BZ,AN1BA,AGqBK,AdvBI,AIqJT,IOnJA,aAAA;AAAA,AXDK,AIqJL,GJ1JkB;AWMlB,AGMI,AV+IJ,EU/II,MAAA,CAAA,GHNJ,WGMI,CAAW,oBAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;AGqB1B,ANiBI,AGvCA,AdLJ,AIsJA,Ia3HA,KjB3BA,EW4CI,CX5CJ,MiB2BA,MNiBI,CAAoB,UAApB,EAA6C,MAA7C,EAA8D,QAA9D,EAAoF;AMjBxF,ANiBI,AI/BI,Af1BR,AgByBQ,AZ2IR,CJpKA,EAAA,KWyDI,CGtCA,IHsCA,GAAA,IAAA,CGtCA,ECOQ,ACDA,UDCJ,ACDA,CDCe,ACDA,GDCf,ACDA,EDCoB,ACDA,KDCpB,ACDA;ACeR,AHpBQ,AViJR,Ya7HA,CHpBe,KAAK,SAAL,CAAe,OAAtB;AGmCJ,ANGI,AGrCH,ACMG,ACDA,AZ4IR,KUnJ0B,MGoCtB,INGQ,QI/BA,ACDA,EC6BR,ANGI,CMHQ,ANGO,GMHnB,EAAyB,EF5BrB,ACDA,CDCe,ACDA,ELgCf,EMHJ,ANG+B,EMH8B,QF5BzD,ACDA,ELgCA,AI/B+B,ACDA,gBDC/B,ACDA;AC6BqB,AbgH7B,QahH6B,OAAA,KAAA,AHpCH,KGoCG,CAAA,EAAA;AAAA,ANIrB,AI/BA,AfbR,AgBYQ,AZ6IR,MajH6B,OAAA,ENIjB,CMJiB,EAAA,KF3BjB,ACDA,ELgCJ,CAAe,CI/Bf,ACDA,CDCS,ACDA,ILgCT,EAAuB,QAAvB,AI/BA,ACDA,EDCyB,ACDA,0BDCzB,ACDA,EDCyC,ACDA,gBDCzC,ACDA;AC4ByD,AHpCvC,AdHpB,AIyJN,GUtJI,MdHE,aAAA,CAAwB,IAAxB,EAAmC,cAAnC,EAA0D;AW4CxD,AI9BA,AfbJ,AgBYI,AZ6IR,MJzJQ,MAAM,GW2CF,AX3CK,EeaJ,AfbT,AgBYS,MDCL,ACDA,CDCY,ACDA,CL+BZ,CAAe,CI9Bf,ACDA,CDCgB,ACDA,ML+BhB,EAAyB,UAAzB,AI9ByB,ACDA,KDCzB,ACDA,EDCgC,ACDA,6BDChC,GAEA,ICHA;ACsBY,AHfH,AVuIjB,EUvIiB,OGeG,QAAA,ADpBR,GCoBwB,EAAhB,AHfH,AELA,CFKA,SAAA,CAAA,OAAA,EELL,CFKR,MELQ,CAAA,GFKa,GAArB,EAAkC,cAAlC,EAAgE;AH0B5D,AI7BA,AffJ,AgBaQ,AZ6IZ,MJ1JQ,GW4CK,QI7BA,EffQ,Ceeb,Affc,GeeH,CffE,CAAjB,CeeI,CffqB,SW4CrB,GAAmC,qBAAnC;AMNA,ANOA,AX5CA,AgBYI,AZ8IZ,IJ1JQ,KW4CK,CX5CC,GAAG,CgBYL,CCyBA,ADzBA,CAAA,CDIA,KAAK,GEqBT,CAAe,GAAf,EAAoB,KAApB,INOA,AX5CkC,EegB9B,CJ4BmC,CX5CD,CAAC,IegBnC,CAAA,KfhBJ,eW4CA;AAEA,AI9BI,ACHc,AZ8I1B,SO7Ga,MAAL,GAAc,CKjCI,CAAA,ILiClB;AMPA,ANQA,AI/BI,AffJ,AgBYkB,AZ+I1B,QJ3JY,CiBsCC,ANQA,KI/BD,CEuBJ,AFvBI,CAAA,CJ+BJ,CMRc,ENQE,EX9ChB,EAAoB,IW8CpB,eMR2B,OAAO,CAAC,MAArB,CAAd;AACA,ANQA,AI/BkB,Affd,AgBWc,AZgJ1B,MJ3JY,GiBsCC,ANQA,GX9CK,EgBWc,EC2BxB,AjBtCc,GiBsCC,ANQf,AI/BkB,ACJW,CDIX,EJ+BA,EMRE,QNQpB,CX9C6B,CiBsCd,CAAgB,ED3BP,CC2BT,CAAf,AD3BkB,CAAA,UhBX4B,CAAC,IAAD,CAAhC,GAAsC,GAAhD;AiBwCJ,ANOA,AG/BA,ACDkB,AfdjB,AI2JT,IapHQ,KNOK,EMPE,GAAG,OAAO,EHxBb,EGwBiB,CNOrB,CMPA,ENOyB,IAAI,AG/B7B,CAAe,GAAf,EAAoB,KAApB,yBH+ByB,EAAzB;AMNA,AF1BkB,AfbrB,AI2JL,GJhKI,CiB4CI,KjBvCG,EiBuCI,CAAC,CjBvCD,CeaiB,KAAK,Cfbf,IAAP,KiBuCP,AjBvCuB,GiBuCK,KF1BJ,AfbrB,EiBuCgC,AF1BjB,Afbe,CiBuCG,AF1BlB,iBE0BU,IAA6B,KAAzD;AAEA,ANMA,AGhCA,AddA,AgBQU,AZmJlB,IJ3JQ,IiBwCM,CNMD,CX9CC,EgBQI,ChBRD,CiBwCG,GAAG,ADhCA,ELsCf,CAAgB,AKtCE,EAAA,CFMd,AENc,CCgCI,GDhCJ,ELsClB,AKtCU,CCgCK,ENMa,CGhC5B,CAAe,CG0BkB,KjBxCC,EW8CL,EX9CS,CAAC,CiBwCvC,ANM4B,EAAU,AGhCtC,EAA+B,Cdd/B,eccA;AHgC2C,AP8GnD,aO9GmD,KAAI,CAAC,mBAAL,CAAyB,IAAzB,CAAA;AML3C,ANKyE,AG/BzE,ACHU,AfXV,AgBQI,AZoJZ,KO/GQ,GMLI,AjBxCA,CiBwCC,GF7BK,GE6BN,CDhCI,CDGO,EE6BA,CF7BG,CCHd,CDGc,AfXlB,CccI,ACHc,ACHH,ChBRK,EiBwCE,CH1BtB,ACHkB,CDGT,CCHC,ME6BK,KAAqB,EH1BpC,EAAyB,OG0BrB,IAA+C,CAAC,OAAO,CAAC,MH1B5D,EAAyC,CG0BzC,EAAuE,aH1BvE;AG2BI,AjBxCA,AgBQI,AZoJhB,MapHY,AjBxCA,MAAM,CiBwCC,CAAC,ADhCJ,EhBRM,CgBQH,IAAI,CAAC,CCgCZ,EDhCe,CCgCK,ADhCJ,OhBRS,AgBQb,CAAY,CCgCxB,EjBxCU,AgBQE,GhBRiB,CgBQE,CAAnB,ChBRZ,EgBQmC,GAAvB,GAA6B,GAA9B,KAAqC,kBAAgB,kBAAkB,CAAC,KAAD,CAAvE,CAAP;ACiCP,ANID,AG9BA,ACJI,AfVH,AgBQI,AZoJb,KatHQ,INMK,EMJE,IAAI,CF9BH,CDIH,EH8BL,CAAgB,AG9BhB,CG0BiB,AF9Bb,EDIO,ACJI,EE8BM,CAAC,AH1BtB,CH8BA,GAA0B,GMJG,CAAC,MNIH,GMJpB,EAAkC,ANIf,EAAc;AMHpC,ANGyC,AG5B7C,ACLQ,AfVX,AI4JL,UapHgB,GNGqC,CIjCrC,GDKH,ACLM,CJiCsC,CAAC,EIjCnC,CAAC,CDKhB,CAAY,CGyBR,AF9Be,CAAC,CE8BK,AHzBzB,CAAgB,KCLA,CAAY,CJiCiB,CAAsB,CIjCnD,IJiC6B,AIjCV,CJiCU,AIjC7B,GAAuB,CDKd,ECLT,GDKhB,ACL6C,EDKb,CCLjB,KAAqC,kBAAgB,aDKpE,GAEA,ECPsF,CAAC,KAAD,CAAvE,CAAP;AE+BA,ANEiE,AIhCpE,AXkJb,KOlHQ,GMFQ,OAAO,CAAC,SAAR,GAAoB,eAApB;AACH,AHxBL,AdjBJ,AI6JJ,SJ7JW,MAAP,CciBQ,cAAc,KAAK,2BAAe,MAAlC,IACC,OAAO,cAAP,KAA0B,WAA1B,IAAyC,OAAO,IAAI,cAAJ,GAAqB,YAA5B,KAA6C,QAD3F,EACsG;AGwBrG,ANED,AGzBI,AdlBX,AI6JD,SOlHa,SAAL,EGzBU,CHyBO,EAAjB,CGzBc,KAAJ,CAAU,4FAAV,CAAN;AH0BJ,AGzBC,AdjBT,AgBMQ,AZsJR,SOlHa,OAAL,GAAe,AKpCf,CAAA,CLoCA;AMDA,ANEA,AKrCA,AZuJR,QapHY,CAAC,ANEA,MMFD,IAAW,KNEf,EMFsB,CNEC,EAAvB,QMFe,KAAuB,WAAlC,IAAiD,CAAC,OAAO,CAAC,WAA9D,EAA2E;AACvE,ANEJ,AGzBM,ACTN,ACJA,AZwJR,MapHY,GNEC,EAAL,CGzBM,CGuBK,CAAC,ANEF,AKtCH,CLsCP,GKtCW,CDIX,CAAA,GDSiB,EGuBb,ADpCG,CFa0B,AEbR,ECoCC,QDpCA,GCoCtB,IDpCqB,EAAU,MAAV,EAAgB;ACqCxC,ANED,AGzBI,ACVJ,AfTF,AgBMM,AZwJZ,KatHQ,INIK,AX5CP,EiB0CS,GHvBH,AEbA,CCoCO,EDpCJ,GAAG,CCoCO,EDpCJ,CAAC,CCoCO,AHvBN,CGuBO,AjB1CxB,CcmBmB,AdnBS,IAA5B,AgBMY,CFaY,AEbA,CCoCO,AjB1Cc,CiB0Cb,ANE9B,GAAiC,EKtCvB,EFaO,AEbc,CLsC/B,AGzBgC,GGuBzB,ADpCG,CAAN,CCoCuC,CHxBV;AGyB7B,ANEJ,AGzBI,ACXJ,AfRJ,AgBMQ,AZwJZ,MJ9JU,GW4CG,CMFG,AjB1CF,GAAG,CcmBL,ACXG,GEkCQ,AjB1CF,CeQF,ACFH,GFaG,EAAE,CHyBb,CG3BiC,ACT1B,CAAkB,CJoCF,AX5Cd,AgBML,ChBNoB,IAAf,CAAb,CiB0CY,AjB3CmC,CAG/C,CeM8B,GEkCW,IFlCZ,EJoCgB,AIpCN,CJoCO,IMFtC,CFlCqB,CEkCyB,CFlCT,KJoCzC;AMDQ,ANGR,AG1BI,ACXA,AXsJZ,QapHgB,CNGH,KG1BD,CGuBW,CAAC,EFlCR,GDWG,EAAE,CCXC,EJqCd,CMHQ,AFlCS,EJqCQ,CMHK,EFlC1B,EJqC0B,QAAL,CAAc,IMH/B,QNGiB,CAA2B;AMF/C,ANEiD,AG7BrB,AddrC,AgBIQ,AZyJZ,MOlH8D,AX3CtD,GAAG,CW2CuD,EAAE,AX3CtD,CccA,CddV,IgBIc,OAAO,GAAG,KAAI,CAAC,ILuC+C,MKvCpD,CAAgB,eAAhB,CAAgC,GAAhC,CAAhB;ACsCH,ANCmD,AIpChD,AfNR,AI6JJ,EJ7JI,GW0C6B,CAAzB,AX1CA,CAAC,OAAL,CAAa,GeMD,OfNE,GAAD,EAAI,EeMS,KAAK,2BAAe,IAAtC,EAA4C;AJqCnD,AGxBG,ACZQ,AfNR,AgBII,AZyJZ,QJ7Jc,GAAG,GAAG,EckBR,ACZI,CfNO,CgBIP,EhBJU,EeMJ,AfNF,CeMG,EfNQ,AgBIR,EDEI,CfNP,EckBM,CdlBW,AgBIrB,CDEO,CAAU,AfNzB,EckBuB,CEdG,WAAlB,IAAiC,OAArC,EAA8C,EFcZ,MAAtC,EAA8C,sCCZ/B,CAAD,CAAN;AEoCR,ANjCJ,AGUQ,ACZI,AfNR,AgBIQ,AZyJhB,IJ7JQ,GAAG,EiByCE,EjBzCE,GckBH,IdlBQ,CiByCZ,EjBzCO,CiByCW,EjBzCA,CckBH,CAAC,CdlBK,CAAC,CiByCG,CAAC,MjBzCR,CAAa,CckB3B,CdlBc,CiByCA,AjBzCX,CckBwB,EdlBG,CiByCM,EjBzCxC,EiByC4C,MHvBxC,8BGuBoC,CAAsB,KAAK,MAA3B,CAAxC;AACA,ANjCJ,AGUK,ACZI,AfNR,AgBIW,AZyJhB,GJhKI,EAL+C,CAU/C,GiBuCS,ODrCG,QCqCR,CDrCiB,ECqCG,CDrCA,IAAI,KAAI,CAAC,oBAAT,CAA8B,GAA9B,EAAmC,SAAnC,EAA8C;ACqC9C,ANhCxB,AKJgB,AZyJpB,kBYzJoB,OAAO,EAAE;ACoCrB,AN/BJ,AGUkB,ACZV,AfLR,AgBGoB,AZyJxB,SJ5JW,GAAG,CAAC,KeKC,CDYM,AdjBX,CciBW,AdjBA,AgBGE,ChBHb,EAAc,GAAG,AgBGE,ChBHD,CgBGG,CDEpB,IfLa,AgBGU,GhBHG,CAA3B,CAAP;AiBuCI,AN/BJ,AGSkB,AdhBrB,AgBC4B,AZ2J7B,EJ1JA,OiBoCa,OAAL,GAAe,OAAf;AACA,AHvBc,ACXV,ACL8D,AZ6J1E,SatHa,KHvBe,GEhBA,CCuCpB,AFlCQ,ACLA,CFgBiB,EGuBR,IAAjB,AFlCe,MAAP,EDWY,EAAN,CAAA,ACXY,WAAtB,EAAmC;AEmCvC,AFlCQ,AfHhB,AgBEa,AZyJb,SatHa,OAAL,AFlCQ,GEkCO,IAAf,IFlCmB,GAAG,IAAI,KAAI,CAAC,sBAAT,CAAgC,GAAhC,EAAqC;AEmC9D,ANjCa,AIFmD,AXyJrE,EOvJkB,aAAA,CAAA,EIFmD,IJEnD,GAAd,QIFgF,EJE3D,AIF6D,UJElF,EAA8C,MAA9C,EAA+D,QAA/D,EAAqF;AACjF,AGOM,ACVqD,ACCvD,AZyJZ,WOvJe,CGOD,GHPK,EGOA,ACVW,CAAd,ACCA,CAAC,CFSK,EAAA,CAAA,IAAA,CHPP,AKFH,CLEqB,AGOnB,CETc,SLEb,EAA8B,MAA9B,EAAsC,QAAtC,CAAP;AMoCG,ANnCN,AGOG,ACVK,AfHP,AgBIU,AZyJhB,EapHW,CNrCO,MXJZ,MeCM,CEwCD,CAAA,AH5BE,ICVM,CfHb,CAAwB,GiByCnB,AjBzCL,CiByCK,CjBzC2B,IiByC3B,EH5BH,CG4BJ,AH5B2B,UG4Bd,CH5BT,EAAoC,KAApC,MG4BJ,EAA4C;AACxC,AHzBM,ACbE,AfHZ,AgBIY,AZyJhB,IapHQ,KjBzCG,GcgBG,AdhBA,IAAI,AgBIF,ECqCM,CHzBD,EGyBI,CHzBE,CdhBF,EcgBK,AEZL,GFYK,AEZF,IAAI,CFYL,CdhBT,CiByCqB,CHzBH,CEZA,CAAC,CCqCM,AjBzCF,CcgBD,CAAC,GAAL,EAAtB,IdhBH,KACF,GAAG,AgBGgB,CAA8B,GAA9B,CAAZ,GCqC0C,IjBxClC,EiBwChB,SjBxCC,IACD;AWgCJ,AGjBI,ACbQ,AfDP,AgBEI,AZyJb,EO5HI,AX/BK,GAAG,CAAC,EW+BT,CAAA,QGjBS,AddJ,GeCa,CfDM,EW+BxB,AGjBI,CHiBA,AGjBY,AddW,CAAC,EccxB,ACbqB,CDaL,ECbQ,KAAI,CAAC,AfDT,CW+BpB,AX/BoC,CW+BpC,GX/BoB,KccK,ACbD,AfDqB,CW+BjD,AI9B4C,EJ8BxC,EGjBA,EAAgC,GHiBpC,EAAS,CXlCF,CAAP,EeI4B,CAAgC,GAAhC,CAAhB,wBDa4D,OAApC,GAA2C,GAA3E;AG0BA,ANVJ,AGfqB,AddxB,AI2JD,eapHY,IAAJ,AHzBiB,CGyBR,AHzBQ,cGyBjB,EAAyB,0BAAzB,EAAyC,gBAAzC;AHzBiB,ACbT,AfChB,AgBCY,AZyJZ,SO9HI,OI7BY,ECEA,GL2BZ,MI7BuB,GAAG,ECEA,EDFI,GCEC,EDFG,CAAC,sBAAT,CAAgC,CCEZ,EDFpB,EAAqC,ECEvD,EAA8C;ACsClD,ANVA,AGjBiB,ACb4C,ACGrD,AZyJhB,SapHa,INVE,CGjBgB,CG2BvB,CAAY,ADrCJ,EL2BI,AI9BiD,CEwC7D,AH3B4B,CG2BZ,KDrCC,CAAC,GFUK,CAAgB,GHiBvC,AGjBuB,ACbqD,CDajC,CCbmC,CCGtE,ECqCiB,CFxCkC,ACG5B,EFUR,EG2BvB,AH3BoD,EG2BpB,ODrCxB,EFUe,CAAN,CAAA,oCG2B4D,2BAAe,cAAf,CAA7C,GAA2E,IAA3G;ANTH,AI/BuF,ACI/E,AZyJb,KOhIa,UK9CoC,CAuBrC,EDNgF,OAAO,EAAE;AE0C7F,AF1C+F,AfEjG,AI4JN,QapHY,CjBxCN,IiBwCW,ONbJ,AI7B0F,AfEjG,CAA4B,KeF2E,CfEvG,CiBwCM,AF1CmG,CfE5D,IiBwCnB,SjBxC1B,EAAoE,UAApE,EAA4F,GAA5F,EAAyG,kBAAzG,EAA2K,OAA3K,EAA0M,iBAA1M,EAAoO;AiBwC1M,AH7BlB,ACbuF,AX+JrG,YUlJc,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;AG6BN,ANbK,AI7BsD,ACOvD,AZyJZ,AiBhOA,GV6FI,CU7FJ,EJ0GmE,KI1GnE,GLuEY,AKvEZ,GNgE8B,CAAd,KCOK,CAAC,EKvEtB,CAAA,GLuEY,GAAmB,CKvE/B,CAAA,QLuEgC,MAAD,EAAc,CKvE7C,CAAA,CAAA;AJ2GY,ANVR,AGnBI,ACbK,ACOG,AZyJhB,eatHmB,CH7BP,AENI,KAAI,CCmCM,ADnCL,CCmCM,CH7BP,CAAC,GENL,CCmCG,ADnCS,CCmCM,EDnClB,CAAgB,CCmCM,CH7B1B,IG6BsB,CAAU,AH7BR,GAA5B,EAAiC,MENA,WAAzB,EAAsC,4BAA0B,GAA1B,GAA6B,GAAnE,OCmCkB,CAAf,CAAP;AACH,AH7BG,AVmJZ,AiBrNA,IAAI,QAAJ,OPkEiB,MAAL,CAAY,GAAZ,CAAgB,kBAAS,KAAzB,EAAgC,uDAAqD,QAAQ,CAAC,UAA9D,GAAwE,GAAxG,EAD6B,CAG7B;ACdA,ACMI,AZ0JhB,AiBrNA,IAAI,UAAJ,EL2DgB,EDNA,GCMI,CAAC,SAAL,GAAiB,SAAjB;ACqCR,AH5BI,ACdI,ACMA,AZ0JhB,SatHa,OF1CG,ACMA,GFQC,IERM,CCoCf,GAAoB,AF1CD,CAAC,CDchB,GAAkB,IAAI,CCdlB,GAAwB,UAAC,CAAD,EDcV,ACd0B,CDcZ,QAAQ,CAAC,UAAT,IAAuB,EAArC,EAAyC,QAAQ,CAAC,UAAlD,CAAlB;AG4BgB,AH3BhB,ACdQ,ACMP,AZ0Jb,AiBrNA,SAAsB,MrBoDd,AgBGI,CKvDZ,CAA8B,EPmEb,GCdO,CMrDxB,EAA8C,CPmElC,CCdgB,CAAC,CDcF,IOnE3B,CPmEY,CdfJ,AqBpDkE,ENqDtD,EAAoB,GfDhC,CAAA;AiB0CA,ANTS,AGjBR,ACde,AfFhB,AIkKR,EOjIiB,WGvBT,EHuBS,CAAA,GGjBF,KCda,CJ+BX,CAAA,KAAA,GAAb,YAAA;AMWI,AH3BI,ACdgB,AfHpB,AgBSI,AZ0JZ,SavHa,GjB5CL,CAAA,CAAA,AgBSI,KFQK,EG2BT,CFzCoB,CCMP,CCmCO,ADnCN,EFQV,CCdoB,CAAC,CEyCA,AH3BN,EERf,EFQA,CCdgB,ACMI,CDNQ,GAAZ,CAAgB,GEyChB,CAAmB,CDnCd,KAAD,EAAa,MCmCjB,AFzCyB,CEyC7C,IFzCoB,EAAgC,oCAAkC,0BAAc,CAAC,CAAC,IAAhB,EAAsB,KAAI,CAAC,iBAA3B,CAAlC,GAA+E,GAA/G;AE0CpB,AH3BC,AdjBa,AgBSN,AZ0JhB,WavHe,KAAK,CjB5CE,CAAA,EgBSF,KAAK,GCmCjB,ADnCyB,IAAjB,CAD6B,CAE7B;ACmCX,AF1CuB,AfHN,AIoKtB,GatIW,mBF3BiB,KAAI,CAAC,SAAL,CAAe,CAAC,CAAC,IAAjB;ADgBpB,ACfiB,AfJH,AgBWN,AZ0JhB,YJrK4B,KcmBf,GERO,CDVI,CAGE,IDelB,CERmB,EFQF,ACfQ,CfJa,EAAxB,CAAA,CcmBQ,ACfJ,EAAc,CCOpB,CFQK,CAAU,GERO,EFQF,GAAf,EAAoB,IERzB,IAAqC,GFQhC,CAAjB,CERsD,YAAY,UAA1D,EAAsE;ACoC3E,AF1CiB,ACOR,AZ0JpB,AiB1NE,EJmGS,QInGT,MJmGS,CAAA,CDnCS,AKhEV,GAAG,CNyDe,CCOH,GCmCd,ADnCiB,CCmCjB,AF1CqB,AMzD9B,CNyD+B,GE0CtB,ADnCsB,CAAC,CDPN,CE0CxB,AF1CmC,GCOnB,EDPQ,KE0CZ,IAAZ,EAAsC;AAClC,ADnCS,AZ0JjB,AiB1NE,QJmGU,EInGV,GJmGe,OInGL,GAAG,KJmGH,GInGV,EJmG8B;AAAA,AF1CJ,AfNd,AIwKd,AiBzN+B,UrBiDjB,KAAK,EqBjDY,CrBiDT,AqBjDS,ErBiDT,CAAA,IAAA,EAAR;AiBgDN,AFzCiB,ACOT,AZ2JhB,AiB1N+B,MJiGiC,UDlChD,MAAM,CAAC,KAAD,CAAN;ACmCJ,ANhBE,AIzBO,AfPb,AgBcK,AZ2Jb,AiB3N+B,YVkFjB,AUlFuB,EJkGnB,AjBhDN,CgBOA,GCyCU,CjBhDd,EAAW,EiBgDD,CAAU,INhBE,CUlFwB,CAAC,CVkFG,QUlFJ,CAAvB,CAAA,oDJkGb,CAAN;AACH,ANhBG,AIzBK,AfPL,AIyKZ,Oa5H0C,CAKlC,IjBlDI,EWgCA,GInCI,EfGG,GWgCC,CXhCD,CWgCG,CXhCH,GAAA,CWgCQ,CXhCR,EACH,EAAA,CAAC,EW+BK,CAAc,IADsB,QX9B1C,CAAA,GAAmB,YAAU,KAD1B,IAAA,CAAP;AWiCA,AGfP,AdfI,AgBYG,AZ2JZ,GUpMiB,WH2DL,AKlBA,OLkBO,EAAE,AKlBA,CAAC,ILkBI,KKlBd,GLkBS,AKlBa,CLkBC,SKlBA,OAAD,EAAsB;ALgBE,AItB1C,ACOA,AZ2JhB,AiB9NQ,UAAA,GVkFM,GItBE,ACOA,AKnEF,GAAiB,ELmEX,AKnEW,CLmEV,AKnEU,IAAA,CN4DJ,CAAC,ACOZ,AKnER,CLmEoB,GAAZ,CAAgB,EDPhB,GAAsB,UAAC,CAAD,EAAgB,ACOb,KAAzB,EAAgC,2CAAyC,0BAAc,OAAO,CAAC,IAAtB,EAA4B,KAAI,CAAC,iBAAjC,CAAzC,GAA4F,GAA5H;ACmCR,ANfA,AGhBU,ACVE,AXkKpB,AiB7NE,EPqEgB,QOrEhB,CJoGa,KAAK,CNfP,AUrFJ,CAAC,GAAR,CPqEgB,ACVQ,AM3DZ,CVqFN,AGhBU,CHgBE,CMeL,CAAgB,CNfvB,AI1BuB,CJ0BP,AUrFtB,EJoGa,AFzCmB,CEyCE,CH/BlB,CAAA,CCVoB,CEyCvB,CAAP,GFzC0B,CAAU,CAAC,CAAC,IJ0Bb,AI1BW,CDU1B,GAAd,ACVkD,CJ0B9C,EAAgC,SGhBpC,ICV8B,CAAd,WJ0BZ;AMgBH,ANdG,AKrBQ,AZ4JhB,AiB7NE,GJ6FS,OI7FT,OVsFW,CUtFH,CAAC,CLiES,KAAI,CAAC,IKjEvB,CAAqB,ILiEP,EAAoB,AKjEP,CAAC,IVsFtB,AUtFe,CAAY,EVsFM,KAAjC,IUtFN,EAA8C,MAAM,CAAC,IAAP,CAAY,WAA1D;AVwFY,AI7BM,ACOA,AZ4JpB,AiB7NE,UAAA,EVuFY,MKtBM,AKjEV,CAAC,GN0Da,CCOA,CAAC,ILsBK,AI7BV,EAAY,CJ6BC,EKtBb,CAAe,CLsBE,GUvFnC,CAA6B,ELiEW,CLsBT,AKtBU,CLsBE,EUvFR,CLiEjB,AKjEkB,OVuFQ,MUvF5C,CVuF2C,EAAU,MAAV,EAAgB;AMc5C,ANbL,AI7BY,AfNpB,AgBaa,AZ4JjB,AiB5NE,EJmGe,QjBhDb,AqBnDF,IVsFU,EMaK,AjBhDP,CiBgDO,AjBhDN,EWmCK,CAAC,AI7BO,AfNpB,CAAW,GqBnDC,CNyDY,AMzDX,CJmGA,AF1CY,CE0CZ,IAAA,AF1CO,AMzDR,CNyDmB,CMzDV,CJmGrB,GNbQ,AI7BY,EfNA,CWmCa,CUtFrB,CAAd,EJmGoB,AjBhDlB,EAA2B,CWmCnB,EMaR,EAA+B,CjBhDA,aAAJ,GAAiB,4BAAjB,GAA8C,aAAa,CAAC,OAAD,EAAU,iBAAV,CAA3D,GAAuF,GAAlH;AWoCQ,AI7BS,AfLX,AgBYG,AZ4Jb,UJxKU,IWkCE,CK3BA,IL2BI,AI/BI,CJ+BH,EXlCK,GeKK,AfLF,YWkCb,CXlC0B,CAAC,CWkCF,MAAzB,AXlC0B,CAAb,GAAyB,aAAzB,GAAyC,MAAxD;AWmCD,AI7Be,AfLH,AIwKrB,aOzIiC,CAAnB,GGnBF,AdZS,CAAA,EeKG,EDOP,ICPa,CAAC,KAAD,CAAN,SDOZ,OAAA,CAAA;AHwBJ,AGxBI,ACNS,AfNA,AgBaT,AZ4JZ,cY5JY,KLuBJ,CAAA,GKvBa,CAAC,OAAV,GAAoB,UAAC,KAAD,EAAkB;ALuB1C,AGxBI,ACLK,AfPI,AgBakC,AZ6JvD,YJ1K2B,EcYf,CAAA,CAAA,CCZI,KfAqB,CAAC,AgBaiB,IhBb5B,CAAgB,AgBagB,CAAC,EhBbjC,EAAqB,CgBaO,CAAW,KAAX,CAAA;ALuB/C,AGvBW,AdZX,AgBYgE,AZ8JxE,YJ1KQ,EWmCM,CKvBF,ILuBO,AGvBA,AdZJ,CcYI,CdZJ,OADiC,CWoClC,CAAgB,KAAhB,CAAsB,KAAK,QAAL,CAAc,cAApC,CAAN,CAAA;AMUA,AHjCW,ACJH,AfPR,AgBYC,AZ8JT,YJ1KQ,CgBnCO,CAAP,CAAA,CD0CQ,CEqCH,EjB5CE,EAAA,MeOY,CAAC,AfToB,IiB8CxC,EFrCQ,CEqCY,EFrCS,YAAA;AEqCT,AHjCT,ACHC,AfPZ,AI0KR,AiBlOC,YrBwDO,EcUiB,ICHL,CDGU,ICHN,CAAC,AfPL,EAAA,IeOA,CAAY,GAAZ,CAAgB,EDGX,EAAN,CAAA,aCH0B,WAAzB,EAAsC,sBAAoB,KAAI,CAAC,GAA/D;AEoCZ,ANVA,AXpCwC,AI8KhD,WJ9K2B,CWoCnB,AXpCa,CAAA,CiB+Cb,ANXA,CAAA,IAAA;AMYA,AFrCY,AXoKpB,AiB/OA,OAAA,CAAA,OAAA,GN2EoB,AM3EpB,KN2EwB,CAAC,CM3EzB,UN2EoB,GAAmB,WAAnB;AEsCZ,ANXA,AGzBI,ACDQ,ACGf,AZiKL,GY/NiB,cLqFJ,CI1BO,CDCR,CAAA,GHyBJ,CAAY,AI1BM,GJ0BlB,AI1BqB,CJ0BL,GI1BJ,eJ0Ba,KAAzB,EAAgC,4BAAhC;AAEA,AG3BI,ACAQ,AfbV,AIiLV,AiBpOA,SAAsB,CrBmDZ,QeaU,AfbF,CWwCV,AU3FR,CV2FQ,AU3FyB,CrBmDZ,EAAA,CAAA,CeaM,CMhE3B,ErBmDqB,AqBnD0B,ErBmDrC;AiBkDF,ANVA,AG3BI,ACCK,AfRb,AgBWO,AZiKX,EYjKW,QhBXP,IcOe,EAAA,AdPT,CiB4CG,AHrCM,ACJH,AfHL,GAAP,AgBWO,CFJQ,AdPJ,AgBWJ,EFJC,CAAA,EGqCJ,GAAiB,CDjCd,CAAA,GCiCH,CDjCG,GAAP,ChBXoB,KAApB,EAA2B,EgBWf,IhBXmB,AgBW/B,EAAqB,WhBXM,GAAiB,iDAAjB,GAAmE,QAAQ,CAAC,UAA5E,GAAsF,GAAjH;AWkCI,AIzBK,ACGL,AZiKR,QYjKY,KAAK,CLsBH,CIrDF,CA4BE,GJyBK,GKtBP,CDHS,CAAP,EAAU,ACGM,ILsBhB,CAAiB,AKtBI,KLsBC,IKtBN,CAAe,UAAf,ELsBC,CAAuB,EKtBM,KAAK,cLsBlC,CAA6C,KKtBhB,CAA0B,IAA9E,EAAoF,ILsB7D,CAAjB,CAAN,CAAA;AIxBQ,ACGJ,AZiKZ,WYjKiB,KDHD,CCGJ,CAAY,GAAZ,CDHU,ACGM,CDHL,CAAD,CAAN,eCGqB,KAAzB,EAAgC,0CAAwC,0BAAc,IAAd,EAAoB,KAAK,iBAAzB,CAAxC,GAAmF,GAAnH;AFHJ,ACCQ,ACGJ,AZiKZ,WYjKiB,QFJT,CAAA,AEII,CAAe,IAAf,CAAoB,IAApB;ALoBJ,AGxBA,ACEK,ACGD,AZiKZ,YO9IQ,CKnBW,CLmBX,CAAA,IAAA,CKnBkB,CAAC,OAAR,EAAP;AFLJ,ACGC,ACGA,AZiKT,AiBvO+B,aNmBhB,CD6CA,AC7CP,CAAA,EMnBuB,CPgEvB,AOhEuB,CPgEvB;AGqCI,ANXJ,AP8IR,AiBxO+B,iBV0FlB,EMWD,CAAA,GNXJ,CAAY,GAAZ,CAAgB,kBAAS,WAAzB,EAAsC,wBAAsB,KAAK,QAAL,CAAc,IAApC,GAAwC,IAA9E,GAEA;AMSI,AjB9CX,AgBiBO,AZiKR,AiBzO+B,WLwEhB,CKxEsB,MLwEf,CAAC,MAAR,CAAe,GKxEwB,CAAC,UAAD,EAAa,oBLwEpD,CAAP;AC6BI,ANRJ,AXpCR,AgBgBK,AZiKL,AiBzOI,GLgEO,SKhEP,EJoGc,AIpGZ,EAAE,CV4FK,EMQU,YAAX,ANRJ,CMQI;ANPJ,AG7BH,ACGA,AXuKL,AiB3OmE,GP2DjD,ACzDD,QMFqC,CAAvB,CAAA,IV8FlB,kBAAL;AACA,AKpBG,AZiKX,EYjKW,eLoBE,GKpBF,CAAA,SAAA,CAAA,IAAA,GAAP,CLoBI,IAEA,OKtBJ;AC0BQ,AHlCA,ACGK,AfZX,AgBkBE,AZiKR,EU1KY,ACGK,MCML,ChBlBN,GiB2CM,CDzBK,CCyBL,CAAA,IAAA,EjB3CN,CcSM,AdTiB,AgBkBrB,CFTI,CESgB,GDNX,CAAA,AfZX,EAAkD,EcS5C,CAAA,ICGK,CAAA,IAAA,GAAb,KDHQ,GAAR,ECGkB,IAAlB,EAA2B,EDHD,OAA1B,EAAgD,KAAhD,EAAoE;AH+BhE,AG9BA,AdTJ,AgBkBQ,AZiKZ,AiB9OQ,MrB2DA,EcSI,CAAC,COpEL,ErB2DM,IcSM,AOpEN,CPoEO,AdTF,EWuCX,AUlGuB,CVkGvB,CUlGuB,CAAA,EPoEvB,EAAsB,AdT1B,AqB3D2B,ErB2DD,AqB3DtB;AVkGA,AG7BI,AdTJ,AgBkBI,AZiKZ,AiB3OE,MPiEU,IOjEV,CrBwDa,AgBkBE,EFTE,CAAC,CdTD,EqBxDV,CAAC,EL0EE,CFTA,AESe,AK1EzB,CAAY,EPiEgB,EAAlB,EdTG,AgBkBH,AK1EV,CrBwD+B,EgBkBI,YAAA,CAAQ,CAAjC,EhBlB8B,WAA3B,CAAP;AWsCA,AG5BC,ACCD,AfVH,AImLL,AiB3OE,UAAA,ENkEU,CAAC,CJ2BC,II3BI,EMlEN,CAAC,QNkEL,CJ2BA,CAAA,AI3BuB,CMlE7B,CAAuB,MAAM,CAAC,IAAP,CAAY,WAAnC,EAAgD,MAAM,CAAC,IAAP,CAAY,WAA5D;ANmEU,ACOA,AZkKZ,AiB3OE,UAAA,CLyEe,MDPL,CAAA,ECOA,AKzEA,CLyEe,AKzEd,SLyED,GAA2B,OKzErC,CAA+B,ILyEM,CAAQ,CAAnC,AKzE2B,CAAC,aAAtC;APiEM,ACCI,AfTR,AImLJ,MJnLQ,EcQI,IdRE,CcQN,EAAW,EdRA,IAAf,EAAqB;AWkCjB,AGzBI,ACAA,AfRJ,AgBgBI,AZmKZ,WJnLe,AgBgBE,CDRE,OAAO,CAAC,ACQf,CAAe,KDRR,CAAe,CCQtB,GDR0B,AfRZ,AgBgBW,KDRH,CAAU,EfRpC,IgBgB6B,CAAQ,CAAjC,sCDRsB,CAAf,CAAP,CAAA;AJ0BJ,AGzBI,ACAH,AfRJ,AImLL,MU3KY,MHyBJ,CGzBW,CHyBX,AGzBY,CHyBZ,IAAA,EGzBI,CAAgB,eAAhB,IAAmC,YAAU,KAA7C;AACA,AEOA,AZoKZ,WYpKiB,SAAL,CAAe,KAAf;ALkBJ,AGxBC,ACDD,AfPJ,AgBeQ,AZoKZ,KUnLwE,CAShE,AdTC,KgBeQ,ChBfU,CAAC,EeOpB,CAAA,AfPJ,CWgCS,CXhCoB,EgBerB,GAAiB,SLiBrB,AKjBI,CANgB,CAQhB,CLemB,kBAAkB,CAAC,SAA1C;AIzBA,AfNA,AgBiBI,AZkKZ,WJnLe,MAAP;AeMA,AfLH,AImLL,AiBjPC,UNmEc,wBAAY,KAAK,MAAjB,EAAyB,KAAzB,EAAgC,KAAK,UAArC,EAAiD,KAAK,GAAtD,EAA4D,KAAK,kBAAjE,EAAqF,IAArF,EAA2F,KAAK,iBAAhG,CAAP,CAAA;ADGA,AESI,AZmKZ,QU5KY,GESK,IFTE,CAAC,AESR,CAAW,MFTX,CAAgB,EEShB,aFTA,CAAJ,EAAsC;AAClC,AdPR,AgBgBK,AZmKT,AiB7PA,OAAA,CAAA,CrB0EW,IAAI,IiBoCH,CI9GZ,GAAA,CJ8GiB,IjBpCN,CAAkB,IqB1E7B,EJ8GY,AjBpCD,CAAP,MiBoCQ,CAAA;AAAA,AH5BA,ACJP,AfHJ,AImLD,GWrLiB,UDSE,OAAO,CAAC,OAAR,CAAgB,eAAhB,CAAP;AG4BA,AH3BH,AdNT,AgBeQ,AZmKR,AiBnPA,SAAgB,ELgFD,GCkBH,CAAA,CAAA,EDlBU,CAAC,KKhFvB,CAAgC,CLgFjB,EAAP,CKhFR,EAA4C;AJmGhC,ANRP,AGnBA,ACJM,ACaN,AZmKL,AiBnPE,ENmES,AMnET,CV2De,AGFL,AEQD,gBCiCC,AIlGO,CJkGP,AIlGQ,ONmET,CAAA,SAAA,AMnEQ,CNmER,CMnE4B,GNmE5B,GAAP,YAAA;AE+BQ,ANNR,AIxBI,AXgLR,AiBpPyC,IAAA,IAAI,CNoEhC,CMpEgC,INoErC;AE8BI,AHzBM,ACJV,AfJR,AgBiBY,AZmKZ,AiBrPuC,EPyErB,AESN,CKlFO,CrBiEnB,AqBjEE,ONqEa,AfJf,GiBiCkB,IF7BI,CE6BC,AF7BA,CCaX,CAAA,CFTM,CAAA,GCJH,EE6BG,AF7BV,CE6ByB,CDhBrB,CAAA,CFTM,CGyBA,AHzBA,EGyBN,CAAA,ADhBA,CFTM,EESd,CFTA,SESc,CFTK,GAAnB,CESA,CFTgC,CESA,UFThC,EAAwD;ACHvD,AfLL,AgBkBQ,AZmKR,AiBrPC,GNkEU;AfFX,AgBmBQ,AZmKR,SYnKa,GhBnBb,GgBmBQ,CAAY,GAAZ,CAAgB,kBAAS,KAAzB,EAAgC,uCAAhC;ACcI,AF1BA,AfHR,AImLJ,AiBzPA,ENyEY,KMzEZ,CAAA,GrBsEI,CiB6BQ,EAAA,CAAA,GjB7BR,CiB6BQ,EjB7BR,EqBtEJ,GAAA,CNyEY,CAAA,SAAA,CAAA,GMzEZ,ENyEY,GAAR,UAAc,CAAd,EAAuB;AACnB,AfHA,AgBeA,AZoKR,QWhLY,ACYA,ChBfC,IeGI,ACYA,KhBfT,EgBeA,ChBfiB,CgBeC,ChBflB,CeGA,EAAsB;AE0BlB,ANHD,AItBC,AfHP,AgBeO,AZoKZ,AiBvPA,EV6FW,OU7FI,CLmFC,CDZC,IJsBN,AKVU,CLUV,CMGM,GDbS,EDZd,CAAiB,AMvE7B,CAA8B,CV6FnB,AKVoB,CCanB,ANHD,AKVqB,EDZpB,CEyBiB,CNHlB,AU7FX,EAA8C,CV6F1C,CKVsB,ICad,CDbiC,CKnF7C,EAA0E,ELmFhD,CLUtB,GKVkD,KAAK,CAAC,IAAN,KAAe,IAAhD,CAAT,EAAgE;ALWpE,AItBI,ACYI,AZoKhB,SO1Ja,EItBI,ECYI,ELUb,CAAY,GAAZ,CAAgB,AKVR,CAAa,CDZjB,GAAmB,ACYE,KAAJ,CAAU,GDZ3B,IJsBqB,KAAzB,EAAgC,yBAAhC,CKVqE,KAAK,CAAC,IAA5C,GAAgD,IAAhD,GAAqD,KAAK,CAAC,MAA3D,GAAiE,IAA3E,CAAb;ALYR,AX1BG,AgBeE,AZoKb,EJnLW,KgBaC,ELaC,AX1BF,CAAA,GgBeQ,MhBfR,CAAA,GW0BH,CX1BG,GAAP,UAAY,IAAZ,EAAmB;AW2Bf,AIvBI,AfHJ,AgBeQ,AZoKhB,SOzJa,AX1BkB,CeGf,GfHe,AgBeV,EDZA,AfHU,GAAA,CAAA,CgBef,ChBfe,CeGnB,CfHmB,CeGD,CJuBtB,CX1BuB,KAAK,SAA5B,EAAuB,EAAA,GAAA,EAAA,CAAA,MAAvB,EAAuB,EAAA,EAAvB,EAAuC;AW2BvC,AIvBQ,AfJH,AgBgBA,AZoKb,UJpLmB,CW2BJ,EIvBM,GJuBD,EX3BO,EeIX,CAAa,AfJF,CeIX,CfJW,CAAA,EW2BZ,AX3BY,CW2BI,AX3BlB,IW2BE,EAAP;AACH,AIvBQ,AfJD,AgBgBH,AZoKT,GO/JW,GXrBC,QAAQ,CAAC,IAAT,CAAc,IAAd;AW6BR,AIxBK,AfJA,AgBgBJ,AZoKL,AiB5PE,GL8EU,OK9EV,OPuEiB,KAAK,IOvEtB,KPuE6B,OAAA,CAAA;AAAA,ACM1B,AfJA,AIoLL,AiB7PE,GNoEU,AfCD;AcEoB,AEkB/B,AZqKA,AiB9PE,SLyFF,KFlB+B,CAAA,CAAA,IOvE7B,MAAA,CLyFF,CKzFE;APyE4B,ACK9B,AfHW,AgB/GX,AZmSA,AiB/PiC,CLpCjC,ChB+GW,CgB/GX,MDkHA,AfHW,CAAA,EqB3EsB,OPyEH,AdEnB,CcFmB,AdEnB,CqB3EsB,CAAA,GrB2EtB,GAAP,MeGJ,IfHiB,AqB3EgB,EAAA,CrB2E7B,EAAqB,GqB3EQ,CAAA;AJiG5B,AHxByB,AC7G9B,AfgHQ,AIoLR,CWpSA,EEmHiB,AFnHjB,MfgH+B,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,SAA5B,EAAuB,EAAA,GAAA,EAAA,CAAA,MAAvB,EAAuB,EAAA,EAAvB,EAAuC;AcHjB,AdGjB,AIqLb,AiBjQE,UrB4EiB,IcHiB,IdGT,CcHc,EdGd,AqB5EzB,ErB4EyB,CAAA,EAAA,CAAd,McHuB,EAAN,CAAA,COzE5B,GAAA;AJmGgB,Ab+JlB,Ea/JkB,cAAA,CAAA,SAAA,CAAA,aAAA,GAAd,UAA4B,cAA5B,EAA0D;AjBtBlD,AIsLZ,AiB3PG,UrBqEa,QAAQ,CAAC,KAAb,EAAoB;AcJV,AdKN,AIsLhB,QJtLgB,IcLM,IdKE,CcLG,AdKF,GcLK,EAAA,AdKd,CcLc,AdKC,GAAf,CcLc,EAAR;AHkCX,AGjCK,AdKH,AIsLb,AiBpQW,EV0GA,UU1GA,GV0GA,CAAA,CGjCU,QHiCV,CAAA,EU1GA,CAAA,GV0GA,EGjCK,CHiCZ,AGjCmC,GOzE5B,CAAA,IAAA,EV0GgB,CGjCX,AOzEZ,EPyEgD,KAApC,EHiCZ,CU1GY,CV0G6B,MU1GzC,EAAwC;AV0GxC,AX3BK,AIsLT,AiBpQM,QVyGF,KAAA,CUzGE,EVyGF,IAAA,CUzGS,CAAC,OAAR,GAAe,QAAA,CAAA,QAAA,CAAA,EAAA,EACV,OAAO,CAAC,OADE,CAAA,EACK;ArB8ErB,AIsLL,AiBnQQ,GrBuEG,yCqBvEyB;AVuGW,AP6J/C,AiBrQ0B,QVwGqB,IAAA,GAAA,AUzG1B,CAAf,CVyGyC;AXxBpC,AIsLX,AiBnQM,ErB6EK,OAAA,CAAA,SAAA,CAAA,CqB7EE,MAAA,CrB6EF,AqB7EE,GrB6ET,MqB7ES,CAAM,IAAN,CrB6ET,AqB7EmB,IAAV,CAAU,IAAV,EAAW,OAAX,CAAP;ArB8EE,AIsLR,AiBnQK,SVoG0C,AXvBhB,IWuBgB,AXvBhB,AqBnFpB,EV0GoC,AXvBhB,GWuBgB,AXvBhB,CAAA,EWuBgB,AXvBhB,EWuBgB,AXvBhB,GWuBgB,AXvBhB,KAAK,IWuBW,CAAA,IXvBvC,EAAuB,EWuBgB,AXvBhB,EWuBgB,CXvBhB,EAAA,CWuB8B,AXvB9B,MAAvB,EAAuB,EAAA,EAAvB,EAAuC;AiBkBnC,ANKmC,AG9BrB,AdOb,AIuLb,MOhK+C,IAAA,AXvB5B,CWuB4B,CMLnC,AHzBc,CH8BqB,EMLhC,CNKgC,CAAA,CML7B,ANK6B,AXvBpB,CcPM,EH8Bc,AXvBpB,CcPY,CGyBhB,AjBlBI,CAAA,CcPe,CdOf,CAAd,CcP6B,EGyB9B,ANKmC,CAAA,EAAA,AG9BR,CH8BQ,EG9BC,IAAI,CAAC,GAAL,EAAtB;AG0BlB,AHzBY,AV8LpB,AiBpQE,iBJ+FW,AHzBY,EOtEvB,IPsEkB,CAAY,GAAZ,CAAgB,OGyB5B,AI/FN,GJ+FgC,KAAK,GHzBM,IGyBX,CAAa,AHzB3B,EAAgC,gBGyB5C,sBHzBgF,OAApC,GAA2C,GAA3E;AACiB,AdMzB,AIwLZ,AiB7QE,UrBqFc,CqBrFd,CAA+B,MrBqFT,CcNa,AdMZ,AqBrFe,CP+EH,AO/EI,OrBqF7B,EAAuB,QqBrFjC,CAAA;AV4GM,AG7B6B,AdOrB,AIwLhB,QOlKc,AXtBE,QAAQ,CAAC,QAAT,GWsBkB,GAAG,KAAK,sBAAL,CAA4B,UAA5B,EAAwC,IAAxC,CAA7B;AAEA,AG/B6B,AdQxB,AIwLb,AiBrQQ,QVoGI,EUpGJ,IPqEmC,KAAK,CH+BxC,AUpGU,GAAG,IAAI,EPqEkB,CAAgB,GAAhB,CAAoB,AOrE/B,CAAC,MPqEU,EAA6B,WAA7B,CAAN,AOrEhB,CPqEgB,EOpEhC,OADgB,CACR,mCADQ,EAC6B;AVoG1C,AXvBC,AIwLT,AiBpQM,QVmGQ,IUnGR,GVmGe,GAAG,IAAI,AUnGZ,EAAE,IAAI,QVmGE,EAAhB,MUnGU,CAAqB,OAArB;ArB6Eb,AIwLL,AiBtQkD,GrBwEvC,QqBzEU,EAIhB,gBAJgB,CAIC,OAAO,CAAC,QAAR,CAAiB,WAJlB,EAKhB,KALgB,EAAb;AVsGA,AGjCkB,AVmM1B,AiBjQE,IV+FM,MU/FN,CV+Fa,CAAC,AGjCU,KG2BV,GH3BkB,AO9DtB,CAAC,CJyFQ,CH3BgB,AO9DnC,CAAc,CP8DqB,CHiC7B,AGjC6B,GG2BrB,ANMiB,CMNJ,AH3BQ,EAAX,SHiCO,AU/F/B,EAAiC,IJyFnB,MIzFoB,CJyFpB,CAAA,KIzFmB,EAAQ;AJyF3B,ANOJ,AXtBD,AIwLX,AiBjQI,ErByEO,OAAA,CWsBO,AXtBP,EqBzEP,OrByEO,AqBzEA,CrByEA,AqBzEC,GAAR,CAAY,EV+FkB,GAA4B,AXtBnD,GAAP,EWsB8D,CAAC,KU/F/D,ErByEiB,AqBzEa,OAA9B,CrByEA,EAA+C,KWsBW,CAA4B,oBAAoB,CAAC,YAAjD,CAAlD;AMPI,AHzBI,AdWZ,AIwLR,AiBjQI,SrByES,GqBzET,EJuFY,CAAA,CAAA,AHzBQ,EdWhB,CAAe,CqBzEX,CAAC,ErByEL,CcXwB,AdWJ,CcXK,OdWzB,GcXgB,CO9DpB,CAAyB,GP8DmB,GAA5B,CO9DhB,CP8DiD;AHiCzC,AGhCY,AdWhB,AIwLR,AiBjQG,UV8Fe,CXrBH,AqB5Eb,IrB4EiB,GiBcC,CHzBS,IGyBJ,ANOM,EGhCP,CHgCe,AGhCH,GAAZ,CGyBJ,AHzBoB,CGyBP,ANOU,CAAC,EXrB7B,CAAwB,IAAxB,CiBcK,ANOmB,CAAc,AXrBR,IiBcE,GHzBE,CdWlC,CAAP,GWqB+B,CAA2B,KGhC1C,EAAsC,SHgCvB,CAA3B,IMPqD,aAA7C,OAAA,CAAA,iBHzBI;AGyBJ,AHvBI,AdUnB,AIwLL,AiBhQE,GrBqES,OqBrET,SP8D2B,CO9DjB,CAAC,EAAX,CAAc,EP8DQ,GAAe,KAAf,UO9DtB,EAAoC,UAAC,OAAD,EAAQ;AJqF1B,ANSR,AG/BS,AVkMrB,AiBhQI,YAAA,CV6Fe,AGnCC,CG0BA,CAAA,CAAA,EACA,ANQG,CAAC,AG/BG,AO9DhB,CAAC,GP8DmB,AO9D3B,CAAY,IV6FG,CAAe,EG/BK,CAAC,MO9DpC,EAA4B,EP8DD,KAAwB,AO9DnD,EV6FkD,CAAC,AG/B5B,EAAiC,UH+BzC,CAAP;AAEA,AGhCY,AdSxB,AIyLA,AiBhQI,SrBuEJ,GqBvEI,CV8Fe,GXvBnB,GcT6B,CO9DjB,CAAC,IV8FkB,AGhCP,CHgCQ,AGhCI,GAAZ,CHgCL,AGhCqB,CHgCH,QU9FjC,CAA4B,GV8FK,IU9FjC,CP8D6C,KAAzB,EAAgC,uDAAqD,QAAQ,CAAC,UAA9D,GAAwE,GAAxG,EADoC,CAGpC;AGqBJ,ANUJ,AX1DhB,AI4NA,AiBhQG,CrBoCH,EAAA,QqBvCE,IViGqB,EMVE,GNUE,CAAC,KMVR,GAAiB,GNUd,CAAiB,CMVE,YNUnB,CAAP,KMVqB,CAAwB,8BAAkB,UAA1C,CAAjB,EACA;AACA,ANSP,AG/BW,AViMxB,AiB/PE,OV2FiB,CAAP,EU3FV,SP8D2B,CO9DjB,CAAC,EAAX,CAAc,KP8DQ,GAAkB,IAAI,CO9D5C,EAA6B,UAAC,IP8DU,CAAc,EO9DzB,EAAU,IP8DuB,CAAC,EO9DlC,EAAiB,MP8DQ,IAAuB,EAArC,EAAyC,QAAQ,CAAC,UAAlD,CAAlB;AHgCf,AG/Be,AViMxB,AiB/PI,KVoFI,OUpFJ,OP8DyB,AO9DlB,CAAC,GAAR,CAAY,EP8DQ,GAAe,EO9DnC,EAAqB,CP8DD,MO9DpB;AJoFgB,AHrBC,AViMrB,AiB/PI,aPwDuB,GOxDnB,GJmFY,AHrBO,CGqBP,GInFL,KAAK,MAAhB,EAAwB;AJmFR,ANWZ,AG/BgB,AdKxB,AI4LA,AiB/PI,SV6FS,GU7FT,MV6FI,CAAe,CU7FX,CAAC,kBV6F8B,CAAC,AU7FxC,CAA6B,OAA7B,EAAsC,EV6FlC,IAAoD,CU7FxD,SV6FyD,eAAD,EAAgE,KAAhE,EAA6E;AMXrH,ANYR,AG/BY,AdKxB,AI4LA,AiB/PG,IrBmEH,MW0BgB,CUjGd,GJqFwB,CNYd,EAAW,CG/BK,CGmBG,IjBd/B,GcLoC,CAAC,CGmBX,CAAgB,KHnBlB,EGmBE,AHnBoB,CGmBI,GAAxB,EAA6B,cAA7B,CAAN,CAAA;ANaJ,AG/BY,AdI5B,AI6LA,AiB9PE,QV4Fc,EU5Fd,KV4FqB,CAAC,IU5FZ,CV4FI,AG/BiB,AO7DpB,CV4FiB,CU5F5B,CAAc,GV4FA,AG/BY,CAAY,GAAZ,CAAgB,OO7D1C,EAA+B,SP6DoB,CO7DnB,IP6DN,EAAgC,CO7D3B,EAAU,IAAV,EAAc,mCP6DuD,0BAAc,QAAQ,CAAC,OAAvB,EAAgC,KAAK,iBAArC,CAA1C,GAAiG,GAAjI;AHgCZ,AX5BhB,AI8LA,AiB9PI,YrBgEJ,IqBhEQ,OAAO,KAAK,MAAhB,EAAwB;AJ4ER,ANiBP,AGhCe,AdOxB,AI2LJ,AiB9PI,OVyFQ,IXtBR,CqBnEA,CV4Fe,IAAI,GGhCS,AO5DpB,CAAC,IP4DwB,KdOjC,CAAY,CWyBG,EAAqB,AGhCZ,AO5DxB,CAAuB,CP4DqB,EdO5C,EAAiC,EqBnEjC,EAAgC,IrBmEhC,AqBnEA,ErBmE+D;AiBS/C,ANiBJ,AGhCgB,AdOxB,AI2LR,AiB9PG,SrBmEU,EqBtEX,KrBsEM,GAAe,IcPc,GdO7B,McPwB,CAAe,QAAQ,CAAC,OAAxB;AGgBZ,ANiBJ,AGhCa,AdOrB,AI2LR,AiB7PE,SrBkEW,CqBlEX,EJ0EkB,ANiBA,EMjBA,CAAA,EjBRZ,EiBQY,CjBRI,AqBlEZ,CAAC,EAAX,CAAc,GV2FmB,CAAC,AXzB5B,IWyBY,IU3FlB,CV2F2C,CU3Ff,UAAC,OAAD,EAAU,EAAV,EAAY,EV2Fe,UAAzC,EAAqD;AACjD,AGhCK,AdOpB,AI2LL,AiB7PI,cV2FoB,CGrCA,COtDhB,KP2DuB,EO3DhB,KAAK,CV2FmB,CAAC,IU3FpC,CV2FgB,CU3FQ,CV2FmB;AACvB,AGhCI,AVkM5B,AiB7PI,YV2FoB,AU3FpB,OV2F2B,CAAC,AU3FpB,CAAC,IV2FW,CAAc,IAAI,CU3FtC,CAAoB,GV2Fc,CAAU,GU3F5C,EAA6B,EAA7B,QV2F2D,CAAC,KAA1B,CAAd;AACH,AGhCO,AdOjB,AI2LX,AiB7PG,ErBkEQ,SWuBS,AU5FlB,MV8FyB,IGhCM,AdOtB,CAAA,KcPiB,CAAY,GAAZ,AdOjB,CcPiC,AdOjC,OAAA,GAAP,QcPiD,IdOjD,CcPwB,EAAgC,oDAAhC;AHiCJ,AGhCC,AdOjB,AI2LR,AiB5PE,QrBiEY,EqBjEZ,EV0FsB,CXzBL,GAAW,GWyBC,CAAC,AU1FpB,CrBiEuB,AqBjEtB,OV0FW,AXzBM,AqBjE5B,CrBiEyC,AqBjEtB,SrBiES,CAAuB,EqBjEhC,KrBiES,CAA+B,KAAK,QAApC,CAAtB;AW0Ba,AGhCA,AVkMrB,AiB5PI,YAAA,OAAO,CAAC,GAAR,CAAY,cAAZ;AV2Fa,AX1BT,AI4LR,AiB5PI,QrBgEQ,CWoBI,GUpFZ,CrBgEa,EW0BM,CX1BH,CAAC,CAAb,EAAgB,SqBhEH,CAAC,YAAD,CAAjB;AJqEgB,ANsBA,AX1BR,AI4LZ,AiB5PG,UV0FiB,CX1BH,AqBnEf,MV6FyB,CMtBD,ANsBE,AX1BhB,CAAa,GW0BL,CMtBW,ANsBG,CMtBF,IjBJpB,CAAuB,MAAvB,CAA8B,EW0BO,CAAC,EX1BtC,EW0BQ,AX1B6B,CAArC,0DiBImB,CAAX;ANuBH,AX1BR,AI4LT,AiB3PE,UAAA,MAAM,CAAC,gBAAP,CAAwB,cAAxB,EAAwC,UAAC,CAAD,EAAE;AV0F/B,APkKb,AiB3PI,YAAA,iBAAiB,CAAC,YAAD,CAAjB;AV0FK,AX1BD,AI4LR,AiB3PG,KVyEK,GXVI,GqBjEV,ErBiEe,OAAL,CAAa,SAAb,CAAuB,MAAvB,KAAkC,CAAlC,IAAuC,KAAK,OAAL,CAAa,cAAxD,EAAwE;AACpE,AI4LZ,AiB1PE,UAAA,CrB8De,MqB9DR,CrB8DG,AqB9DF,CrB8De,EqB9DvB,CAAY,WrB8DF,GAA8B,CqB9DxC,IrB8DU,CAAoC,UAAC,CAAD,EAAE,CAAQ,CAA9C;AW2BJ,AX1BC,AI4LT,AiB1PS,QVwFK,OAAO,EUxFZ,CVwFe,AUxFf,KVwFoB,QAAL,CAAc,YAAd,CAA2B,oBAA3B,CAAhB;AAEA,AX3BH,AI4LL,AiB3PS,GrBsDE,CWoCH,YAAY,GAAG,KAAK,WAAL,CAAiB,OAAjB,EACV,KADU,CACJ,UAAC,CAAD,EAAE;AACL,AGzCI,AVyMpB,AiB5PS,MV4FO,MU5FD,CV4FQ,CAAC,EGzCA,CAAC,EHyCT,CAAc,CAAd,CGzCc,AOnDL,CACpB,KADU,CPmDK,EAAmB,AOjDlC,IAFU,CAEL,YAAA;AJ8DU,AN6BJ,AGzCQ,AdYxB,AI6LA,AiB3PgB,SrB8DhB,GiBAoB,CN6BG,KAAI,CAAC,AU3FZ,OAAO,CAAC,CV2FD,AX7BvB,CiBAqC,AN6BC,CU3FtB,CAAY,CJ8DuC,IAA/C,OI9DJ,CAAA,KV2F0C,CAAC,YAApC,CAAP;AM5BI,AN6BP,AGzCW,AdRxB,AIiNA,AiB5PyC,CrB2CzC,EAAA,EW6CuB,CAAf,KU1FO,CJiEK,CI9Df,KAHU,CPqDc,AOlDlB,EJ8DkB,GAAG,CAAZ,AHZI,CAAY,AOlDlB,CAAC,EPkDK,CAAgB,EOrDzB,CAAN,CAAA,cPqDwC,KAAzB,EAAgC,0DAAwD,GAAC,CAAC,OAA1F;AH2ChB,AG1Ca,AVyMrB,WO/Je,EG7CK,KH6CZ,CG1CmB;AH2CtB,AG1CmB,AVyMxB,GO1MW,eGCiB,GAAC,YAAY,oBAAjB,EAA+B;AAC3B,AVyM5B,AiBjQE,iBAAA,CAAA;AVmGU,AG1CgB,AdS5B,AIgMA,AiBlQE,EVmGU,aAAA,CAAA,KG1CqB,IH0CrB,CAAA,CG1CgB,CAAY,GAAZ,CAAgB,KH0ChC,GAAR,UAAoB,AG1C6B,KAAzB,EH0CxB,AG1CwD,EH0CxB,kDG1CR;AH2CpB,AG1CiB,AdSzB,AIgMA,AiBnQE,IrBmEF,KWiCa,GUpGJ,EAAA,CPuDe,AOvDf,ErBmET,EqBnES,EP0DsB,AO1D7B,CAAA,SVoGM;AACA,AG1CoB,AdQ5B,AIiMA,WO/Je,KAAK,UAAL,CAAgB,IAAhB,CAAqB,OAArB,CAAP;AMjCgC,ANkCnC,AG1CuB,AdO5B,AIkMA,GOlKY,SXhCZ,ScPiC,MGQO,CAAA,GHRZ,GAAkB,GAAlB;AGQY,ANoCpC,AG3CwB,AdSxB,AIgMJ,WJhMI,UcT6B,GdS7B,CAAY,GcTY,GAAe,KAAf,IdSxB,EAAqC;AiBFD,AHNf,AdSjB,AIgMR,AiBnQC,SrBmEY,aiBHiC,EjBGtC,GAAuB,CiBHe,CAAK,ajBG3C,SiBHsC,CAA4B,GAA5B,CAAN,CAAA;AHLnB,AdShB,AIgML;AACA,AiBnQA,SAAe,iBAAf,CACE,QADF,EAEE,IAFF,EAGE,OAHF,EAGgC;AJ2DZ,AjBMT,AIgMX,EJhMW,aAAA,CAAA,IiBNS,KjBMT,CAAA,GAAA,GAAP,CqBhED,IJ0DkC,GAAG,EAAA,AjBMzB,AqBhEL,CJ0D8B,IAAA,EAApB,CjBMhB,CiBLgB,CjBKe,EqBhEzB,KrBgEN,EAA8C;AAC1C,AIgMR,QJhMY,QAAQ,IAAI,KAAK,eAArB,EAAsC;AiBL1B,AjBMR,AIgMZ,cJhMoB,QAAR,EiBNY,MAAA,CAAK,eAAL,KAAoB;AAAA,AjBO5B,AIgMhB,AiBlQM,MAAA,IAAI,GrBkEW,AqBlEX,QAAA,CAAA,SrBkEoB,QAAd;AiBPI,AjBQJ,AIgMhB,AiBlQI,QAAA,KrBkEiB,CqBlEX,EAAE,MJ0DmE,AI3DrE,SrBmEoB,KAAd;AACI,AIgMpB,AiBlQI,QAAA,ErBkEgB,OAAO,CAAC,CqBlEb,EAAE,ErBkEG,CAAc,MAAI,IAAI,IAAJ,GAAW,WAAX,EAAJ,GAA4B,IAA5B,GAAiC,kBAAS,QAAT,CAAjC,GAAmD,IAAnD,GAAwD,OAAtE;AACA,AIgMpB,AiBrQU,OAAA,EAGH,OAHG,CAAJ;AVsGK,APgKX,AiBhQE,EVgGS,IUhGT,IAAI,CAAC,IVgGI,AUhGT,CVgGS,EUhGG,IAAI,CAAC,EVgGR,CAAA,IAAA,EUhGG,CVgGV,AUhGwB,QAAA,CAAA,CVgGZ,OUhGY,CAAA,EVgGxB,AUhGwB,EVgGM,AUhGC,IAAI,IAAI,EAAf,CAAA,EAAkB;AVgGV,AXhCpB,AIiMhB,AiBjQgD,QVgGZ,AUhGY,IVgGZ,CXhCf,CqBhEiC,CVgGlB,CUhGoB,CVgGpB,cXhCN,OAAd;AACI,AIiMpB,AiBlQ8C,OAAlB,CAAd,CAAZ,CrBiEkB,OAAO,CAAC,IAAR,CAAa,MAAI,IAAI,IAAJ,GAAW,WAAX,EAAJ,GAA4B,IAA5B,GAAiC,kBAAS,QAAT,CAAjC,GAAmD,IAAnD,GAAwD,OAArE;AiBVC,AjBWD,AIiMpB,AiBjQE,SV8FkC,IAAA,AU9FlC,CAAA,CV8FkC,GAAA,GAAA,EAAA,GAAA,SAAA,CAAA,QAAA,EAAA,IAAc;AAAd,APoKpC,AiBlQE,MV8FkC,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;AMvChB,AjBUJ,AIkMhB,AiBnQE,QAAO,KrBiEY,AqBjEP,CAAC,UJuDS,OjBUM,UiBVW,CAAC,AjBU1B,KiBVI,EAA6B,IIvDG,QAAtC,EAAkD,IAAlD,CAAL,CAA6D,IAA7D,CACL,UAAC,CAAD,EAAE;AJuDkB,AjBUJ,AIkMpB,AiBlQM,UrBgEc,EqBhEV,CAAC,CAAC,EAAN,CrBgEqB,CAAC,AqBhEZ,IrBgEI,CAAa,KiBVH,CjBUO,IiBVF,AjBUM,CiBVL,GjBUC,GAAW,WiBVK,AjBUhB,CiBViB,CjBUrB,GAA4B,CiBV1B,CAAX,EjBUS,GAAiC,kBAAS,QAAT,CAAjC,GAAmD,IAAnD,GAAwD,OAArE;AiBTC,ANsCb,AX5BY,AIkMpB,AiBlQQ,QV4FM,EU5FN,OAAO,CAAC,GAAR,CAAY,MV4Fc,GAAG,AU5F7B,EAAuB,CAAvB,EV4FkC,gBAAL,CAAsB,UAAtB,EAAkC,IAAlC,EAAwC,IAAxC,CAA7B;AAEA,AGjDI,AVsNZ,AiBlQO,QV6FO,CU/FR,MV+Fe,AU7FR,EP4CI,CHiDO,KAAK,AGjDjB,CAAY,GAAZ,CAAgB,GHiDJ,CAAc,YAAd,CAA2B,CGjDd,KAAzB,EAAgC,YHiDpB,CAAhB,8BGjDI,GAEA;AGSQ,ANwCZ,AGhDI,AdiBI,AImMhB,AiBlQQ,UAAA,CV8FO,KAAK,CU9FL,CAAC,KAAR,CJsDiB,AItDH,GV8FP,CAAiB,OAAjB,CAAP,GU9FA,EJsD0C,AItDX,CJsDY,AItD3C,eJsDY,EAAgD;AAC5C,ANwCnB,AX/Be,AImMpB,AiBlQO,GVwFI,yBMlCmB,KAAK,CAAC,8LAAD,CAAX;AACH,ANyCjB,AGlDQ,AdkBQ,AImMpB,UJnMoB,MclBJ,CAAC,AdkBU,CAAC,GAAR,CclBE,AdkBU,MAAI,IAAI,CclB5B,EAAuB,CdkBC,GAAW,WAAX,EAAJ,GAA4B,IAA5B,GAAiC,kBAAS,QAAT,CAAjC,GAAmD,IAAnD,GAAwD,OAApE;AcjBJ,AdkBI,AImMpB,AiBlQM,eAAO,CAAC,CAAC,EP6CM,EO7CR,EAAP,QP6CU;AGUI,AHTP,AdGD,AIkNZ,AiBlQK,OATI,CAAP,CAAA,eJ+DsB,iBAAiB,CAAC,GAAtB,EAA2B;AACvB,AjBSf,AImMT,sBa5MwB,GAAG,GAAG,iBAAiB,CAAC,GAAxB;AACH,AjBShB,AImML,GJtNW;AIuNX,AiBnQC;AJwDmB,AjBQpB,AIoMA,SJpMA,aAAA,EiBRwB,iBAAiB,CAAC,WAAtB,EAAmC;AAGzB,AjBtB9B,AIgOA,CJhOA,EAAA,mBiBsB8B,aAAA,GAAc,iBAAiB,CAAC,WAAhC;Ab2M9B;Aa1MwB,Ab2MxB,sBa3MwB,MAAA,CAAK,kBAAL,GAA0B,YAAA;AAAM,Ab4MxD,+Ba5MwD,aAAA;AAAW,Ab6MnE,uBa7MwB;AACH,Ab6MrB;AOpKW,APqKX,EOrKW,aAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAuB,UAAvB,EAAyC;AMvCzB,ANuChB,APsKJ,QOtKI,KAAA,GAAA,IMvCgB,ANuChB,SMvCyB;AHlBxB,AVgOL,GU3RkB;AHoH6B,APwK/C,QOxK+C,IAAA,GAAA,EAAA;AGvD9B,AVgOjB,EUhOiB,oBAAA,CAAA,SAAA,CAAA,IAAA,GAAb,UAAkB,IAAlB,EAA2B;AViO/B,SO1K+C,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,SAAA,CAAA,QAAA,EAAA,IAAc;AAAd,AP2K/C,MO3K+C,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;AGtDvC,AVkOR,YUlOY,CAAC,KAAK,OAAV,EAAmB;AACf,AVkOZ,iBUlOY,CAAA;AHsDJ,AGtDI,AVmOZ,QO7Kc,oBAAoB,GAAG,KAAK,gBAAL,CAAsB,UAAtB,EAAkC,IAAlC,EAAwC,KAAxC,CAA7B;AAEA,AGxDI,AVoOZ,QO5Kc,CAAC,GAAG,AGxDC,IHwDG,GGxDI,CAAC,GHwDT,CAAiB,EGxDhB,CAAe,IAAI,GHwDF,EGxDF,CAAU,IHwDT,EAAU,MAAV,EAAgB,gCGxDjB,CAAf,CAAP,CAAA;AHyDA,AGxDH,AVoOT;AO3KY,AP4KZ,MO5KY,KAAI,CAAC,SAAL,CAAe,oBAAoB,CAAC,YAApC,IAAqD,UAAC,eAAD,EAAgE,KAAhE,EAA6E;AAC9H,AGzDR,AVqOR,YO5KoB,GGzDZ,CAAA,CHyDQ,EAAW;AACP,AG1DZ,AVsOR,UO5KoB,MAAM,CAAC,KAAD,CAAN;AACA,AG3DZ,AVuOR,UUvOe,wBAAY,KAAK,MAAjB,EAAyB,aAAzB,EAAwC,KAAK,UAA7C,EAAyD,KAAK,GAA9D,EAAoE,KAAK,kBAAzE,EAA6F,IAA7F,EAAmG,KAAK,iBAAxG,CAAP,CAAA;AH4DS,AP4KjB,SO/KgB,MAGO,IAAI,eAAJ,EAAqB;AACxB,AP4KpB;AO3KoB,AG7Df,AVyOL,GU9OiB,WHkEO,eAAe,CAAC,IAAhB,KAAyB,0BAAY,UAAzC,EAAqD;AACjD,AP4KxB,gBO5K4B,eAAe,CAAC,KAApB,EAA2B;AACvB,AG7DX,AVyOjB,EUzOiB,YH6DW,MAAM,CAAC,CG7DlB,CAAA,EH6DsB,KAAJ,CAAU,CG7D5B,CAAA,IAAA,GAAb,MH6DwD,CAAC,KAA1B,AG7D/B,CH6D8B,CAAN;AACH,AP4KzB,aO9KwB,MAEO;AACH,AP4K5B,cO5K4B,OAAO,CAAC,eAAe,CAAC,MAAjB,CAAP;AACH,AP4KzB;AO3KqB,AP4KrB,WOlLoB,MAMO;AACH,AP4KxB,YO5KwB,IMvDD,ENuDO,CAAC,IAAI,KAAJ,CAAU,IMvDD,CAAC,GAAlB,IAAyB,SAAS,GAAG,MNuDS,SMvDI,MNuDW,CMvDX,ANuDY,CMvDZ,GNuD1C,CAAD,CAAN;AMvDiD,ANwDpD,AGlEb,AV8OR,iBU9Oa,MAAL,CAAY,GAAZ,CAAgB,kBAAS,KAAzB,EAAgC,2CAAhC,GAEA;AGQiE,ANyDxD,AP4KjB,carOyE,CAAA,CAAA;AN0D5D,AGjEL,AV6OR,OO5LY,UGjDC,OAAL,GAAe,KAAf;AACA,AV6OR,iBU7Oa,SAAL,CAAe,KAAf;AHkEI,AP4KZ,UO5KkB,OAAO,GAAG,KAAI,CAAC,QAAL,CAAc,YAAd,CAA2B,oBAA3B,CAAhB;AM1DI,AbuOhB,gBavOoB,SAAS,KAAK,aAAd,IAA+B,iBAAiB,CAAC,GAArD,EAA0D;AACtD,AN2DR,AP4KZ,MO5KY,KAAI,CAAC,QM3DS,GN2Dd,CAAiB,CM3DE,CAAC,KN2DpB,EACK,KADL,CACW,UAAC,CAAD,EAAE,aM5DM,CAAX;AACH,AN4DG,AP2KpB,QO3KoB,MAAM,CAAC,CAAD,CAAN,CADK,CAEL;AP2KpB;AatOgB,AN4DI,AGrER,AVgPZ,eO3K2B,IM5DX,AHTJ,CGSI,AN4De,AGrEnB,CHqEoB,SAAL,CAAe,oBAAoB,CAAC,YAApC,CAAP;AM5DJ,AN6DC,AGtEL,AViPZ,OOhLY;AMxDI,AN8DP,AGvEG,AVkPZ,KOvMkB,CAAV,QMlCc,AHTJ,KGSS,AHTJ,SAAX,CAAA,KGSU,CAAqB,GAArB,EAA0B,KAAK,OAAL,CAAa,SAAvC,EAAkD,iBAAlD,EAAqE,cAArE,CAAN,CAAA;ANgER,AP0KR,WO1Ke,CAAP;AACH,AP0KL,GO5MW;AM/BK,ANmEZ,AG5EQ,AVqPZ,Ya5OgB,AHTJ,EGSI,AHTJ,CGSI,AHTJ,IGSI,AHTJ,IAEA;AVoPZ;AACA;AUpPY,AVqPZ,iBUrPiB,MAAL,CAAY,GAAZ,CAAgB,kBAAS,KAAzB,EAAgC,uDAAqD,KAAK,GAA1D,GAA6D,GAA7F;AAEM,AVoPlB,YUpPkB,aAAa,GAAgB;AGOnC,AHNI,AVoPhB,cUpPgB,EGMA,KAAK,AHNE,EAAE,OGMT,YAA0B,0CAA9B,EAAoD;AAChD,AHR+B,AVsP/C,aUtPkB,MGQG,QAAL,CAAc,iBAAd,GAAkC,IAAlC;AACH,ANmEF,AGzEe,AVoP1B,EO3KW,aAAA,CAAA,GGzEe,CAAA,KHyEf,CAAA,EAAA,GAAP,UAAU,UAAV,EAA8B,SAA9B,EAAiE;AAC7D,AG1EkB,AVqP1B,QO3KY,CAAC,UAAD,IAAe,CAAC,SAApB,EAA+B;AMlE3B,ANmEA,AG3Ec,AVsP1B,cUtPgC,GGQf,EHRoB,OGQzB,CAAgB,MHRI,EAAN,CGQd,AHRc,GGQc,KAAK,SAAjC;ANoEH,AP2KT;Aa9OY,Ab+OZ,iBa/OiB,SAAL,CAAgB,OAAhB,GAA0B,UAAC,CAAD,EAAE;AAAK,ANqErC,AG9EU,AVyPlB,IO3KQ,QG9EU,EH8EA,GAAG,AG9EE,GAAG,CGSmB,CHTnB,CAAA,GGSuB,CAAC,ANqEnB,AG9EL,CH8EM,CG9Ed,UH8EG,EMrEwB,ANqErC,CMrEyD,CAApB,CAAA;AAAsB,AHRvD,AVyPZ,aajPY,EAEA,EHVK,iBAAL,CAAuB,aAAvB,EAAsC,KAAtC;AGWA,ANmEJ,AG7EI,AVyPZ,QO5KY,CAAC,KAAK,KG7EN,CAAA,CH6EC,CAAa,UAAb,CAAL,EAA+B;AAC3B,AG9EA,AV0PZ,WO5KiB,OAAL,CAAa,UAAb,IAA2B,EAA3B;AACH,AG/EG,AV2PZ,KOpLqE,CAU7D,QGjFU,KAAK,UAAL,CAAgB,MAAhB,CAAuB,KAAK,GAA5B,EAAkC,aAAlC,CAAN,CAAA;AGWA,AbiPZ,iBajPiB,WAAL,CAAgB;AAAA,AbkP5B;AalPY,ANuEJ,AGlFI,AV8PZ,QO5KY,IGlFA,CHkFK,CMvEW,AHXhB,CAAA,IAAA,CHkFA,CAAa,UAAb,EAAyB,OAAzB,CAAiC,SAAjC,MAAgD,CAAC,CAArD,EAAwD;AMvEpC,ANwEhB,AP4KZ;AapPY,ANyEH,AGlFG,AV8PZ,iBU9PiB,MAAL,CAAY,GAAZ,CAAgB,kBAAS,KAAzB,EAAgC,8CAAhC;AV+PZ;AO3KQ,AP4KR,SO5Ka,OAAL,CAAa,UAAb,EAAyB,IAAzB,CAA8B,SAA9B;AACH,AP4KL,GO5LW;AP6LX;AO5JW,AP6JX,EO7JW,aAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,UAAX,EAA+B,MAA/B,EAAgE;AAC5D,AGrGI,AVkQZ,QO7JY,CAAC,QGrGI,EHqGT,EAAiB,EGrGb,CAAY,GAAZ,CAAgB,kBAAS,KAAzB,EAAgC,wCAAhC,GAEA;AGOA,AN6FA,AGnGA,AVgQZ,iBa1PiB,MAAL,CAAY,GAAZ,CAAgB,kBAAS,KAAzB,EAAgC,qCAAqC,GAArE;AACA,AN6FH,AP6JT,iBa1PiB,eAAL,GAAoB;AAAA,AHNpB,AViQZ,iBUjQiB,YAAL;AGMA,AN+FJ,AP6JR,IO7JQ,UAAU,GAAG,UAAU,CAAC,WAAX,EAAb;AM9FI,AN+FJ,AP6JR,QO7Jc,QAAQ,CM/FL,EN+FQ,KAAK,EM/FlB,GAAiB,EN+FJ,CAAa,MM/F1B,IN+Fa,CAAjB;AM9FI,Ab4PZ,kBa5PkB,GAAN;AN+FJ,AP8JR,QO9JY,CAAC,QAAL,EAAe;AACX,AP8JZ;AO7JS,AP8JT;AACA;AO9JQ,AP+JR,QO/JY,MAAJ,EAAY;AACR,AP+JZ,UO/JkB,SAAS,GAAG,QAAQ,CAAC,OAAT,CAAiB,MAAjB,CAAlB;APgKZ;AO/JY,APgKZ,UOhKgB,SAAS,KAAK,CAAC,CAAnB,EAAsB;AMlG7B,ANmGW,AG3GX,AV2QL,Ga7UkB,AHsCD,KHuID,QAAQ,CAAC,MAAT,CAAgB,SAAhB,EAA2B,CAA3B;APiKhB;AalQkB,ANkGF,AG1GJ,AV2QZ,EanQkB,AHRN,UH0GQ,IMlGF,CAAA,GNkGU,CAAC,CG1GjB,CAAA,GGQM,CAAA,ANkGE,KAAoB,AG1G5B,CH0GI,AG1GJ,EH0G+B,UG1G/B,GAAR,CGQc,GAAd,QHRA,EGQqC,GAArC,EAAgD;ANmGhC,AG1GZ,AV2QR,QU3QY,KAAK,IH0GU,GG1GnB,EH0GwB,AG1GN,OH0GC,CAAa,UAAb,CAAP;AACH,AG1GL,AV2QZ,UU3QgB,UAAU,GAAG,+CAAjB;AH2GC,APiKb;AOhKS,AG3GG,AV4QZ,KOzKQ,KGnGQ,CH2GD,IG3GM,UAAT,EAAqB;AH4GrB,AG3GI,AV4QhB,QU5QgB,KH2GG,KAAK,AG3GE,IAAI,GH2GX,CAAa,SG3GW,CH2GxB,CAAP,GG3GoC,UAAhC;AH4GP,AG3GI,AV4Qb;AO/JK,APgKL,GOtLW,cMlFC,KAAK,oBAAL,OAAA,CAAA;AAAA,AN0GR,AG9GQ,AV6QZ,WU7QiB,MAAL,CAAY,GAAZ,CAAgB,kBAAS,KAAzB,EAAgC,UAAhC;AGIA,AHHA,AV6QZ,WU7QiB,GGGL,CAAA,CAAA,EHHA,CAAa,KAAK,UAAlB;AGIc,AHHjB,AV6QT,mBa1Q0B,CAAA;AAAA,AHFrB,AV6QL,GUtRY;AGWc,Ab4Q1B,ca5QgC,KAAK,kBAAL,EAAN,CAAA;AHD1B,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":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** The HTTP status code represented by this error. */\r\n    public statusCode: number;\r\n\r\n    /** Constructs a new instance of {@link @aspnet/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage: string, statusCode: number) {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        this.statusCode = statusCode;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link @aspnet/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\n\r\n/** Represents an HTTP request. */\r\nexport interface HttpRequest {\r\n    /** The HTTP method to use for the request. */\r\n    method?: string;\r\n\r\n    /** The URL for the request. */\r\n    url?: string;\r\n\r\n    /** The body content for the request. May be a string or an ArrayBuffer (for binary data). */\r\n    content?: string | ArrayBuffer;\r\n\r\n    /** An object describing headers to apply to the request. */\r\n    headers?: { [key: string]: string };\r\n\r\n    /** The XMLHttpRequestResponseType to apply to the request. */\r\n    responseType?: XMLHttpRequestResponseType;\r\n\r\n    /** An AbortSignal that can be monitored for cancellation. */\r\n    abortSignal?: AbortSignal;\r\n\r\n    /** The time to wait for the request to complete before throwing a TimeoutError. Measured in milliseconds. */\r\n    timeout?: number;\r\n}\r\n\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    /** Constructs a new instance of {@link @aspnet/signalr.HttpResponse} with the specified status code.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     */\r\n    constructor(statusCode: number);\r\n\r\n    /** Constructs a new instance of {@link @aspnet/signalr.HttpResponse} with the specified status code and message.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string);\r\n\r\n    /** Constructs a new instance of {@link @aspnet/signalr.HttpResponse} with the specified status code, message and string content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n\r\n    /** Constructs a new instance of {@link @aspnet/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText?: string,\r\n        public readonly content?: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport abstract class HttpClient {\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @aspnet/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @aspnet/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @aspnet/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @aspnet/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @aspnet/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @aspnet/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP request to the specified URL, returning a {@link Promise} that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {HttpRequest} request An {@link @aspnet/signalr.HttpRequest} describing the request to send.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an HttpResponse describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    public getCookieString(url: string): string {\r\n        return \"\";\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    Trace = 0,\r\n    /** Log level for low severity diagnostic messages. */\r\n    Debug = 1,\r\n    /** Log level for informational diagnostic messages. */\r\n    Information = 2,\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    Warning = 3,\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    Error = 4,\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    Critical = 5,\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface ILogger {\r\n    /** Called by the framework to emit a diagnostic message.\r\n     *\r\n     * @param {LogLevel} logLevel The severity level of the message.\r\n     * @param {string} message The message.\r\n     */\r\n    log(logLevel: LogLevel, message: string): void;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger implements ILogger {\r\n    /** The singleton instance of the {@link @aspnet/signalr.NullLogger}. */\r\n    public static instance: ILogger = new NullLogger();\r\n\r\n    private constructor() {}\r\n\r\n    /** @inheritDoc */\r\n    // tslint:disable-next-line\r\n    public log(_logLevel: LogLevel, _message: string): void {\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\n\r\n/** @private */\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n\r\n/** @private */\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n        // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n        (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n\r\n/** @private */\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string, accessTokenFactory: (() => string | Promise<string>) | undefined, content: string | ArrayBuffer, logMessageContent: boolean): Promise<void> {\r\n    let headers;\r\n    if (accessTokenFactory) {\r\n        const token = await accessTokenFactory();\r\n        if (token) {\r\n            headers = {\r\n                [\"Authorization\"]: `Bearer ${token}`,\r\n            };\r\n        }\r\n    }\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, logMessageContent)}.`);\r\n\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers,\r\n        responseType,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\n/** @private */\r\nexport function createLogger(logger?: ILogger | LogLevel) {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\n/** @private */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    public observers: Array<IStreamSubscriber<T>>;\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private subject: Subject<T>;\r\n    private observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this.subject = subject;\r\n        this.observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this.subject.observers.indexOf(this.observer);\r\n        if (index > -1) {\r\n            this.subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this.subject.observers.length === 0 && this.subject.cancelCallback) {\r\n            this.subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly minimumLogLevel: LogLevel;\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this.minimumLogLevel = minimumLogLevel;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this.minimumLogLevel) {\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    console.error(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    console.warn(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    console.info(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    console.log(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// @ts-ignore: This will be removed from built files and is here to make the types available during dev work\r\nimport * as Request from \"@types/request\";\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\nlet requestModule: Request.RequestAPI<Request.Request, Request.CoreOptions, Request.RequiredUriUrl>;\r\nif (typeof XMLHttpRequest === \"undefined\") {\r\n    // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n    // @ts-ignore: TS doesn't know about these names\r\n    const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n    requestModule = requireFunc(\"request\");\r\n}\r\n\r\nexport class NodeHttpClient extends HttpClient {\r\n    private readonly logger: ILogger;\r\n    private readonly request: typeof requestModule;\r\n    private readonly cookieJar: Request.CookieJar;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        if (typeof requestModule === \"undefined\") {\r\n            throw new Error(\"The 'request' module could not be loaded.\");\r\n        }\r\n\r\n        this.logger = logger;\r\n        this.cookieJar = requestModule.jar();\r\n        this.request = requestModule.defaults({ jar: this.cookieJar });\r\n    }\r\n\r\n    public send(httpRequest: HttpRequest): Promise<HttpResponse> {\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n\r\n            let requestBody: Buffer | string;\r\n            if (isArrayBuffer(httpRequest.content)) {\r\n                requestBody = Buffer.from(httpRequest.content);\r\n            } else {\r\n                requestBody = httpRequest.content || \"\";\r\n            }\r\n\r\n            const currentRequest = this.request(httpRequest.url!, {\r\n                body: requestBody,\r\n                // If binary is expected 'null' should be used, otherwise for text 'utf8'\r\n                encoding: httpRequest.responseType === \"arraybuffer\" ? null : \"utf8\",\r\n                headers: {\r\n                    // Tell auth middleware to 401 instead of redirecting\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...httpRequest.headers,\r\n                },\r\n                method: httpRequest.method,\r\n                timeout: httpRequest.timeout,\r\n            },\r\n            (error, response, body) => {\r\n                if (httpRequest.abortSignal) {\r\n                    httpRequest.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (error) {\r\n                    if (error.code === \"ETIMEDOUT\") {\r\n                        this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                        reject(new TimeoutError());\r\n                    }\r\n                    this.logger.log(LogLevel.Warning, `Error from HTTP request. ${error}`);\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                if (response.statusCode >= 200 && response.statusCode < 300) {\r\n                    resolve(new HttpResponse(response.statusCode, response.statusMessage || \"\", body));\r\n                } else {\r\n                    reject(new HttpError(response.statusMessage || \"\", response.statusCode || 0));\r\n                }\r\n            });\r\n\r\n            if (httpRequest.abortSignal) {\r\n                httpRequest.abortSignal.onabort = () => {\r\n                    currentRequest.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this.cookieJar.getCookieString(url);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this.logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = true;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this.logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger } from \"./ILogger\";\r\nimport { NodeHttpClient } from \"./NodeHttpClient\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n\r\n/** Default implementation of {@link @aspnet/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly httpClient: HttpClient;\r\n\r\n    /** Creates a new instance of the {@link @aspnet/signalr.DefaultHttpClient}, using the provided {@link @aspnet/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n\r\n        if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this.httpClient = new XhrHttpClient(logger);\r\n        } else {\r\n            this.httpClient = new NodeHttpClient(logger);\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return this.httpClient.send(request);\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this.httpClient.getCookieString(url);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data) || (typeof Buffer !== \"undefined\" && data instanceof Buffer)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, binaryData.slice(0, responseLength));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        responseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\n\r\n/** Defines the type of a Hub Message. */\r\nexport enum MessageType {\r\n    /** Indicates the message is an Invocation message and implements the {@link @aspnet/signalr.InvocationMessage} interface. */\r\n    Invocation = 1,\r\n    /** Indicates the message is a StreamItem message and implements the {@link @aspnet/signalr.StreamItemMessage} interface. */\r\n    StreamItem = 2,\r\n    /** Indicates the message is a Completion message and implements the {@link @aspnet/signalr.CompletionMessage} interface. */\r\n    Completion = 3,\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @aspnet/signalr.StreamInvocationMessage} interface. */\r\n    StreamInvocation = 4,\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @aspnet/signalr.CancelInvocationMessage} interface. */\r\n    CancelInvocation = 5,\r\n    /** Indicates the message is a Ping message and implements the {@link @aspnet/signalr.PingMessage} interface. */\r\n    Ping = 6,\r\n    /** Indicates the message is a Close message and implements the {@link @aspnet/signalr.CloseMessage} interface. */\r\n    Close = 7,\r\n}\r\n\r\n/** Defines a dictionary of string keys and string values representing headers attached to a Hub message. */\r\nexport interface MessageHeaders {\r\n    /** Gets or sets the header with the specified key. */\r\n    [key: string]: string;\r\n}\r\n\r\n/** Union type of all known Hub messages. */\r\nexport type HubMessage =\r\n    InvocationMessage |\r\n    StreamInvocationMessage |\r\n    StreamItemMessage |\r\n    CompletionMessage |\r\n    CancelInvocationMessage |\r\n    PingMessage |\r\n    CloseMessage;\r\n\r\n/** Defines properties common to all Hub messages. */\r\nexport interface HubMessageBase {\r\n    /** A {@link @aspnet/signalr.MessageType} value indicating the type of this message. */\r\n    readonly type: MessageType;\r\n}\r\n\r\n/** Defines properties common to all Hub messages relating to a specific invocation. */\r\nexport interface HubInvocationMessage extends HubMessageBase {\r\n    /** A {@link @aspnet/signalr.MessageHeaders} dictionary containing headers attached to the message. */\r\n    readonly headers?: MessageHeaders;\r\n    /** The ID of the invocation relating to this message.\r\n     *\r\n     * This is expected to be present for {@link @aspnet/signalr.StreamInvocationMessage} and {@link @aspnet/signalr.CompletionMessage}. It may\r\n     * be 'undefined' for an {@link @aspnet/signalr.InvocationMessage} if the sender does not expect a response.\r\n     */\r\n    readonly invocationId?: string;\r\n}\r\n\r\n/** A hub message representing a non-streaming invocation. */\r\nexport interface InvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Invocation;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n}\r\n\r\n/** A hub message representing a streaming invocation. */\r\nexport interface StreamInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamInvocation;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n}\r\n\r\n/** A hub message representing a single item produced as part of a result stream. */\r\nexport interface StreamItemMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamItem;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n\r\n    /** The item produced by the server. */\r\n    readonly item?: any;\r\n}\r\n\r\n/** A hub message representing the result of an invocation. */\r\nexport interface CompletionMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Completion;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The error produced by the invocation, if any.\r\n     *\r\n     * Either {@link @aspnet/signalr.CompletionMessage.error} or {@link @aspnet/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly error?: string;\r\n    /** The result produced by the invocation, if any.\r\n     *\r\n     * Either {@link @aspnet/signalr.CompletionMessage.error} or {@link @aspnet/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly result?: any;\r\n}\r\n\r\n/** A hub message indicating that the sender is still active. */\r\nexport interface PingMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Ping;\r\n}\r\n\r\n/** A hub message indicating that the sender is closing the connection.\r\n *\r\n * If {@link @aspnet/signalr.CloseMessage.error} is defined, the sender is closing the connection due to an error.\r\n */\r\nexport interface CloseMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Close;\r\n    /** The error that triggered the close, if any.\r\n     *\r\n     * If this property is undefined, the connection was closed normally and without error.\r\n     */\r\n    readonly error?: string;\r\n}\r\n\r\n/** A hub message sent to request that a streaming invocation be canceled. */\r\nexport interface CancelInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.CancelInvocation;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n}\r\n\r\n/** A protocol abstraction for communicating with SignalR Hubs.  */\r\nexport interface IHubProtocol {\r\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n    readonly name: string;\r\n    /** The version of the protocol. */\r\n    readonly version: number;\r\n    /** The {@link @aspnet/signalr.TransferFormat} of the protocol. */\r\n    readonly transferFormat: TransferFormat;\r\n\r\n    /** Creates an array of {@link @aspnet/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * If {@link @aspnet/signalr.IHubProtocol.transferFormat} is 'Text', the `input` parameter must be a string, otherwise it must be an ArrayBuffer.\r\n     *\r\n     * @param {string | ArrayBuffer | Buffer} input A string, ArrayBuffer, or Buffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input: string | ArrayBuffer | Buffer, logger: ILogger): HubMessage[];\r\n\r\n    /** Writes the specified {@link @aspnet/signalr.HubMessage} to a string or ArrayBuffer and returns it.\r\n     *\r\n     * If {@link @aspnet/signalr.IHubProtocol.transferFormat} is 'Text', the result of this method will be a string, otherwise it will be an ArrayBuffer.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string | ArrayBuffer} A string or ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message: HubMessage): string | ArrayBuffer;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Arg, Subject } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected,\r\n    /** The hub connection is connected. */\r\n    Connected,\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly cachedPingMessage: string | ArrayBuffer;\r\n    private readonly connection: IConnection;\r\n    private readonly logger: ILogger;\r\n    private protocol: IHubProtocol;\r\n    private handshakeProtocol: HandshakeProtocol;\r\n    private callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private methods: { [name: string]: Array<(...args: any[]) => void> };\r\n    private id: number;\r\n    private closedCallbacks: Array<(error?: Error) => void>;\r\n    private receivedHandshakeResponse: boolean;\r\n    private handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private handshakeRejecter!: (reason?: any) => void;\r\n    private connectionState: HubConnectionState;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private timeoutHandle?: any;\r\n    private pingServerHandle?: any;\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol): HubConnection {\r\n        return new HubConnection(connection, logger, protocol);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this.logger = logger;\r\n        this.protocol = protocol;\r\n        this.connection = connection;\r\n        this.handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this.processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this.connectionClosed(error);\r\n\r\n        this.callbacks = {};\r\n        this.methods = {};\r\n        this.closedCallbacks = [];\r\n        this.id = 0;\r\n        this.receivedHandshakeResponse = false;\r\n        this.connectionState = HubConnectionState.Disconnected;\r\n\r\n        this.cachedPingMessage = this.protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this.connectionState;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public async start(): Promise<void> {\r\n        const handshakeRequest: HandshakeRequestMessage = {\r\n            protocol: this.protocol.name,\r\n            version: this.protocol.version,\r\n        };\r\n\r\n        this.logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        this.receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this.handshakeResolver = resolve;\r\n            this.handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this.protocol.transferFormat);\r\n\r\n        this.logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n        await this.sendMessage(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n        this.logger.log(LogLevel.Information, `Using HubProtocol '${this.protocol.name}'.`);\r\n\r\n        // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n        this.cleanupTimeout();\r\n        this.resetTimeoutPeriod();\r\n        this.resetKeepAliveInterval();\r\n\r\n        // Wait for the handshake to complete before marking connection as connected\r\n        await handshakePromise;\r\n        this.connectionState = HubConnectionState.Connected;\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public stop(): Promise<void> {\r\n        this.logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        this.cleanupTimeout();\r\n        this.cleanupPingTimer();\r\n        return this.connection.stop();\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const invocationDescriptor = this.createStreamInvocation(methodName, args);\r\n\r\n        let promiseQueue: Promise<void>;\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this.createCancelInvocation(invocationDescriptor.invocationId);\r\n            const cancelMessage: any = this.protocol.writeMessage(cancelInvocation);\r\n\r\n            delete this.callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this.sendMessage(cancelMessage);\r\n            });\r\n        };\r\n\r\n        this.callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n        promiseQueue = this.sendMessage(message)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this.callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        return subject;\r\n    }\r\n\r\n    private sendMessage(message: any) {\r\n        this.resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const invocationDescriptor = this.createInvocation(methodName, args, true);\r\n\r\n        const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n        return this.sendMessage(message);\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const invocationDescriptor = this.createInvocation(methodName, args, false);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this.callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n            this.sendMessage(message)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this.callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => void) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this.methods[methodName]) {\r\n            this.methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this.methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this.methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @aspnet/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @aspnet/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this.methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this.methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this.methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this.closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private processIncomingData(data: any) {\r\n        this.cleanupTimeout();\r\n\r\n        if (!this.receivedHandshakeResponse) {\r\n            data = this.processHandshakeResponse(data);\r\n            this.receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this.protocol.parseMessages(data, this.logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this.invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion:\r\n                        const callback = this.callbacks[message.invocationId];\r\n                        if (callback != null) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this.callbacks[message.invocationId];\r\n                            }\r\n                            callback(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close:\r\n                        this.logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        // We don't want to wait on the stop itself.\r\n                        // tslint:disable-next-line:no-floating-promises\r\n                        this.connection.stop(message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined);\r\n\r\n                        break;\r\n                    default:\r\n                        this.logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.resetTimeoutPeriod();\r\n    }\r\n\r\n    private processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this.handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n\r\n            // We don't want to wait on the stop itself.\r\n            // tslint:disable-next-line:no-floating-promises\r\n            this.connection.stop(error);\r\n            this.handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            this.handshakeRejecter(message);\r\n            // We don't want to wait on the stop itself.\r\n            // tslint:disable-next-line:no-floating-promises\r\n            this.connection.stop(new Error(message));\r\n            throw new Error(message);\r\n        } else {\r\n            this.logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this.handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private resetKeepAliveInterval() {\r\n        this.cleanupPingTimer();\r\n        this.pingServerHandle = setTimeout(async () => {\r\n            if (this.connectionState === HubConnectionState.Connected) {\r\n                try {\r\n                    await this.sendMessage(this.cachedPingMessage);\r\n                } catch {\r\n                    // We don't care about the error. It should be seen elsewhere in the client.\r\n                    // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                    this.cleanupPingTimer();\r\n                }\r\n            }\r\n        }, this.keepAliveIntervalInMilliseconds);\r\n    }\r\n\r\n    private resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this.timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n        }\r\n    }\r\n\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise.\r\n        // tslint:disable-next-line:no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this.methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this.logger.log(LogLevel.Error, message);\r\n\r\n                // We don't need to wait on this Promise.\r\n                // tslint:disable-next-line:no-floating-promises\r\n                this.connection.stop(new Error(message));\r\n            }\r\n        } else {\r\n            this.logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private connectionClosed(error?: Error) {\r\n        const callbacks = this.callbacks;\r\n        this.callbacks = {};\r\n\r\n        this.connectionState = HubConnectionState.Disconnected;\r\n\r\n        // if handshake is in progress start will be waiting for the handshake promise, so we complete it\r\n        // if it has already completed this should just noop\r\n        if (this.handshakeRejecter) {\r\n            this.handshakeRejecter(error);\r\n        }\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                callback(null, error ? error : new Error(\"Invocation canceled due to connection being closed.\"));\r\n            });\r\n\r\n        this.cleanupTimeout();\r\n        this.cleanupPingTimer();\r\n\r\n        this.closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n    }\r\n\r\n    private cleanupPingTimer(): void {\r\n        if (this.pingServerHandle) {\r\n            clearTimeout(this.pingServerHandle);\r\n        }\r\n    }\r\n\r\n    private cleanupTimeout(): void {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private createInvocation(methodName: string, args: any[], nonblocking: boolean): InvocationMessage {\r\n        if (nonblocking) {\r\n            return {\r\n                arguments: args,\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        } else {\r\n            const id = this.id;\r\n            this.id++;\r\n\r\n            return {\r\n                arguments: args,\r\n                invocationId: id.toString(),\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private createStreamInvocation(methodName: string, args: any[]): StreamInvocationMessage {\r\n        const id = this.id;\r\n        this.id++;\r\n\r\n        return {\r\n            arguments: args,\r\n            invocationId: id.toString(),\r\n            target: methodName,\r\n            type: MessageType.StreamInvocation,\r\n        };\r\n    }\r\n\r\n    private createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport enum HttpTransportType {\r\n    /** Specifies no transport preference. */\r\n    None = 0,\r\n    /** Specifies the WebSockets transport. */\r\n    WebSockets = 1,\r\n    /** Specifies the Server-Sent Events transport. */\r\n    ServerSentEvents = 2,\r\n    /** Specifies the Long Polling transport. */\r\n    LongPolling = 4,\r\n}\r\n\r\n/** Specifies the transfer format for a connection. */\r\nexport enum TransferFormat {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    Text = 1,\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    Binary = 2,\r\n}\r\n\r\n/** An abstraction over the behavior of transports. This is designed to support the framework and not intended for use by applications. */\r\nexport interface ITransport {\r\n    connect(url: string, transferFormat: TransferFormat): Promise<void>;\r\n    send(data: any): Promise<void>;\r\n    stop(): Promise<void>;\r\n    onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    onclose: ((error?: Error) => void) | null;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController implements AbortSignal {\r\n    private isAborted: boolean = false;\r\n    public onabort: (() => void) | null = null;\r\n\r\n    public abort() {\r\n        if (!this.isAborted) {\r\n            this.isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this.isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: (() => void) | null;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly pollAbort: AbortController;\r\n\r\n    private url?: string;\r\n    private running: boolean;\r\n    private receiving?: Promise<void>;\r\n    private closeError?: Error;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted() {\r\n        return this.pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger, logMessageContent: boolean) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logger = logger;\r\n        this.pollAbort = new AbortController();\r\n        this.logMessageContent = logMessageContent;\r\n\r\n        this.running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.url = url;\r\n\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this.pollAbort.signal,\r\n            headers: {},\r\n            timeout: 100000,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = await this.getAccessToken();\r\n        this.updateHeaderToken(pollOptions, token);\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this.httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this.running = false;\r\n        } else {\r\n            this.running = true;\r\n        }\r\n\r\n        this.receiving = this.poll(this.url, pollOptions);\r\n    }\r\n\r\n    private async getAccessToken(): Promise<string | null> {\r\n        if (this.accessTokenFactory) {\r\n            return await this.accessTokenFactory();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private updateHeaderToken(request: HttpRequest, token: string | null) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            request.headers[\"Authorization\"] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (request.headers[\"Authorization\"]) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            delete request.headers[\"Authorization\"];\r\n        }\r\n    }\r\n\r\n    private async poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this.running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this.getAccessToken();\r\n                this.updateHeaderToken(pollOptions, token);\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this.httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this.running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this.running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this.logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this.logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this.running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this.logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this.closeError = e;\r\n                            this.running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this.raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url!, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this.running = false;\r\n        this.pollAbort.abort();\r\n\r\n        try {\r\n            await this.receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this.logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this.url}.`);\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: {},\r\n            };\r\n            const token = await this.getAccessToken();\r\n            this.updateHeaderToken(deleteOptions, token);\r\n            await this.httpClient.delete(this.url!, deleteOptions);\r\n\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        } finally {\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this.raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this.closeError) {\r\n                logMessage += \" Error: \" + this.closeError;\r\n            }\r\n            this.logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this.closeError);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { EventSourceConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly eventSourceConstructor: EventSourceConstructor;\r\n    private eventSource?: EventSource;\r\n    private url?: string;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, eventSourceConstructor: EventSourceConstructor) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logger = logger;\r\n        this.logMessageContent = logMessageContent;\r\n        this.eventSourceConstructor = eventSourceConstructor;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n\r\n        // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\r\n        this.url = url;\r\n\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n\r\n            let eventSource: EventSource;\r\n            if (typeof window !== \"undefined\") {\r\n                eventSource = new this.eventSourceConstructor(url, { withCredentials: true });\r\n            } else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this.httpClient.getCookieString(url);\r\n                eventSource = new this.eventSourceConstructor(url, { withCredentials: true, headers: { Cookie: cookies } } as EventSourceInit);\r\n            }\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this.logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            this.close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                eventSource.onerror = (e: MessageEvent) => {\r\n                    const error = new Error(e.data || \"Error occurred\");\r\n                    if (opened) {\r\n                        this.close(error);\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this.logger.log(LogLevel.Information, `SSE connected to ${this.url}`);\r\n                    this.eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"SSE\", this.httpClient, this.url!, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(e?: Error) {\r\n        if (this.eventSource) {\r\n            this.eventSource.close();\r\n            this.eventSource = undefined;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly logger: ILogger;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly webSocketConstructor: WebSocketConstructor;\r\n    private readonly httpClient: HttpClient;\r\n    private webSocket?: WebSocket;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor) {\r\n        this.logger = logger;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logMessageContent = logMessageContent;\r\n        this.webSocketConstructor = webSocketConstructor;\r\n        this.httpClient = httpClient;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket: WebSocket | undefined;\r\n            const cookies = this.httpClient.getCookieString(url);\r\n\r\n            if (typeof window === \"undefined\" && cookies) {\r\n                // Only pass cookies when in non-browser environments\r\n                webSocket = new this.webSocketConstructor(url, undefined, {\r\n                    headers: {\r\n                        Cookie: `${cookies}`,\r\n                    },\r\n                });\r\n            }\r\n\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this.webSocketConstructor(url);\r\n            }\r\n\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            // tslint:disable-next-line:variable-name\r\n            webSocket.onopen = (_event: Event) => {\r\n                this.logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this.webSocket = webSocket;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                let error: any = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                }\r\n                reject(error);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this.logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this.logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    this.onreceive(message.data);\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => this.close(event);\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this.webSocket && this.webSocket.readyState === this.webSocketConstructor.OPEN) {\r\n            this.logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this.logMessageContent)}.`);\r\n            this.webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this.webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this.webSocket.onclose = () => {};\r\n            this.webSocket.onmessage = () => {};\r\n            this.webSocket.onerror = () => {};\r\n            this.webSocket.close();\r\n            this.webSocket = undefined;\r\n\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this.close(undefined);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(event?: CloseEvent): void {\r\n        // webSocket will be null if the transport did not start successfully\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (event && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason}).`));\r\n            } else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\n/** @private */\r\nconst enum ConnectionState {\r\n    Connecting,\r\n    Connected,\r\n    Disconnected,\r\n}\r\n\r\n/** @private */\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n    error?: string;\r\n}\r\n\r\n/** @private */\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: Array<keyof typeof TransferFormat>;\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\nlet WebSocketModule: any = null;\r\nlet EventSourceModule: any = null;\r\nif (typeof window === \"undefined\" && typeof require !== \"undefined\") {\r\n    // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n    // @ts-ignore: TS doesn't know about these names\r\n    const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n    WebSocketModule = requireFunc(\"ws\");\r\n    EventSourceModule = requireFunc(\"eventsource\");\r\n}\r\n\r\n/** @private */\r\nexport class HttpConnection implements IConnection {\r\n    private connectionState: ConnectionState;\r\n    private baseUrl: string;\r\n    private readonly httpClient: HttpClient;\r\n    private readonly logger: ILogger;\r\n    private readonly options: IHttpConnectionOptions;\r\n    private transport?: ITransport;\r\n    private startPromise?: Promise<void>;\r\n    private stopError?: Error;\r\n    private accessTokenFactory?: () => string | Promise<string>;\r\n\r\n    public readonly features: any = {};\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.logger = createLogger(options.logger);\r\n        this.baseUrl = this.resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent || false;\r\n\r\n        const isNode = typeof window === \"undefined\";\r\n        if (!isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        } else if (isNode && !options.WebSocket) {\r\n            if (WebSocketModule) {\r\n                options.WebSocket = WebSocketModule;\r\n            }\r\n        }\r\n\r\n        if (!isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        } else if (isNode && !options.EventSource) {\r\n            if (typeof EventSourceModule !== \"undefined\") {\r\n                options.EventSource = EventSourceModule;\r\n            }\r\n        }\r\n\r\n        this.httpClient = options.httpClient || new DefaultHttpClient(this.logger);\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        this.options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this.connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a connection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Connecting;\r\n\r\n        this.startPromise = this.startInternal(transferFormat);\r\n        return this.startPromise;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            throw new Error(\"Cannot send data if the connection is not in the 'Connected' State.\");\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this.transport!.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this.stopError = error;\r\n\r\n        try {\r\n            await this.startPromise;\r\n        } catch (e) {\r\n            // this exception is returned to the user as a rejected Promise from the start method\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        if (this.transport) {\r\n            await this.transport.stop();\r\n            this.transport = undefined;\r\n        }\r\n    }\r\n\r\n    private async startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this.accessTokenFactory = this.options.accessTokenFactory;\r\n\r\n        try {\r\n            if (this.options.skipNegotiation) {\r\n                if (this.options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this.constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this.transport!.connect(url, transferFormat);\r\n                } else {\r\n                    throw Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this.getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this.connectionState === ConnectionState.Disconnected) {\r\n                        return;\r\n                    }\r\n\r\n                    if (negotiateResponse.error) {\r\n                        throw Error(negotiateResponse.error);\r\n                    }\r\n\r\n                    if ((negotiateResponse as any).ProtocolVersion) {\r\n                        throw Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this.accessTokenFactory = () => accessToken;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this.createTransport(url, this.options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            this.transport!.onreceive = this.onreceive;\r\n            this.transport!.onclose = (e) => this.stopConnection(e);\r\n\r\n            // only change the state if we were connecting to not overwrite\r\n            // the state if the connection is already marked as Disconnected\r\n            this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this.connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private async getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        let headers;\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                headers = {\r\n                    [\"Authorization\"]: `Bearer ${token}`,\r\n                };\r\n            }\r\n        }\r\n\r\n        const negotiateUrl = this.resolveNegotiateUrl(url);\r\n        this.logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this.httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                throw Error(`Unexpected status code returned from negotiate ${response.statusCode}`);\r\n            }\r\n\r\n            return JSON.parse(response.content as string) as INegotiateResponse;\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to complete negotiation with the server: \" + e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private createConnectUrl(url: string, connectionId: string | null | undefined) {\r\n        if (!connectionId) {\r\n            return url;\r\n        }\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionId}`;\r\n    }\r\n\r\n    private async createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this.createConnectUrl(url, negotiateResponse.connectionId);\r\n        if (this.isITransport(requestedTransport)) {\r\n            this.logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this.transport.connect(connectUrl, requestedTransferFormat);\r\n\r\n            // only change the state if we were connecting to not overwrite\r\n            // the state if the connection is already marked as Disconnected\r\n            this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n            return;\r\n        }\r\n\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        for (const endpoint of transports) {\r\n            this.connectionState = ConnectionState.Connecting;\r\n            const transport = this.resolveTransport(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (typeof transport === \"number\") {\r\n                this.transport = this.constructTransport(transport);\r\n                if (!negotiateResponse.connectionId) {\r\n                    negotiateResponse = await this.getNegotiationResponse(url);\r\n                    connectUrl = this.createConnectUrl(url, negotiateResponse.connectionId);\r\n                }\r\n                try {\r\n                    await this.transport!.connect(connectUrl, requestedTransferFormat);\r\n                    this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n                    return;\r\n                } catch (ex) {\r\n                    this.logger.log(LogLevel.Error, `Failed to start the transport '${HttpTransportType[transport]}': ${ex}`);\r\n                    this.connectionState = ConnectionState.Disconnected;\r\n                    negotiateResponse.connectionId = undefined;\r\n                }\r\n            }\r\n        }\r\n\r\n        throw new Error(\"Unable to initialize any of the available transports.\");\r\n    }\r\n\r\n    private constructTransport(transport: HttpTransportType) {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this.options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.WebSocket);\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this.options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.EventSource);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private resolveTransport(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined, requestedTransferFormat: TransferFormat): HttpTransportType | null {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this.logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this.options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this.options.EventSource)) {\r\n                        this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                    } else {\r\n                        this.logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        return transport;\r\n                    }\r\n                } else {\r\n                    this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                }\r\n            } else {\r\n                this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private changeState(from: ConnectionState, to: ConnectionState): boolean {\r\n        if (this.connectionState === from) {\r\n            this.connectionState = to;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private stopConnection(error?: Error): void {\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this.stopError || error;\r\n\r\n        if (error) {\r\n            this.logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this.logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this.onclose) {\r\n            this.onclose(error);\r\n        }\r\n    }\r\n\r\n    private resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (typeof window === \"undefined\" || !window || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative  path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this.logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n        return negotiateUrl;\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 1;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link @aspnet/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this.isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this.isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this.isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link @aspnet/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private isInvocationMessage(message: InvocationMessage): void {\r\n        this.assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this.assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private isStreamItemMessage(message: StreamItemMessage): void {\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this.assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\n/** A builder for configuring {@link @aspnet/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** Configures console logging for the {@link @aspnet/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @aspnet/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @aspnet/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n    /** Configures custom logging for the {@link @aspnet/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel | ILogger} logging An object implementing the {@link @aspnet/signalr.ILogger} interface or {@link @aspnet/signalr.LogLevel}.\r\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logging: LogLevel | ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @aspnet/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @aspnet/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @aspnet/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = transportTypeOrOptions;\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @aspnet/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @aspnet/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @aspnet/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @aspnet/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol());\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\nexport const VERSION: string = \"0.0.0-DEV_BUILD\";\r\n\r\n// Everything that users need to access must be exported here. Including interfaces.\r\nexport { AbortSignal } from \"./AbortController\";\r\nexport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nexport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nexport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nexport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nexport { HubConnection, HubConnectionState } from \"./HubConnection\";\r\nexport { HubConnectionBuilder } from \"./HubConnectionBuilder\";\r\nexport { MessageType, MessageHeaders, HubMessage, HubMessageBase, HubInvocationMessage, InvocationMessage, StreamInvocationMessage, StreamItemMessage, CompletionMessage, PingMessage, CloseMessage, CancelInvocationMessage, IHubProtocol } from \"./IHubProtocol\";\r\nexport { ILogger, LogLevel } from \"./ILogger\";\r\nexport { HttpTransportType, TransferFormat, ITransport } from \"./ITransport\";\r\nexport { IStreamSubscriber, IStreamResult, ISubscription } from \"./Stream\";\r\nexport { NullLogger } from \"./Loggers\";\r\nexport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\n","import * as SignalR from \"@aspnet/signalr\";\nimport { RoomResponse } from \"../server/src/types\";\n\nexport interface NetworkingDelegate {\n  updatedRoom: (name: string, description: string) => void;\n  updatedPresenceInfo: (users: string[]) => void;\n  playerConnected: (name: string) => void;\n  playerDisconnected: (name: string) => void;\n  chatMessageReceived: (name: string, message: string) => void;\n  playerEntered: (name: string, from: string) => void;\n  playerLeft: (name: string, to: string) => void;\n}\n\nlet myUserId: string;\nlet myDelegate: NetworkingDelegate;\n\nexport async function connect(userId: string, delegate: NetworkingDelegate) {\n  myUserId = userId;\n  myDelegate = delegate;\n\n  const result: RoomResponse = await callAzureFunction(\"connect\");\n\n  console.log(result);\n  delegate.updatedRoom(result.room.displayName, result.room.description);\n  delegate.updatedPresenceInfo(result.roomOccupants);\n\n  connectSignalR(userId, delegate);\n}\n\nexport async function moveToRoom(roomId: string) {\n  // TODO: Show some progress updates here\n\n  const result: RoomResponse = await callAzureFunction(\"moveRoom\", {\n    to: roomId,\n  });\n\n  console.log(result);\n  myDelegate.updatedRoom(result.room.displayName, result.room.description);\n  myDelegate.updatedPresenceInfo(result.roomOccupants);\n}\n\nexport function sendChatMessage(text: string) {\n  callAzureFunction(\"sendChatMessage\", { text });\n}\n\nasync function connectSignalR(userId: string, delegate: NetworkingDelegate) {\n  class CustomHttpClient extends SignalR.DefaultHttpClient {\n    public send(request: SignalR.HttpRequest): Promise<SignalR.HttpResponse> {\n      request.headers = {\n        ...request.headers,\n        \"x-ms-client-principal-id\": userId,\n      };\n      return super.send(request);\n    }\n  }\n\n  const connection = new SignalR.HubConnectionBuilder()\n    .withUrl(`https://mud.azurewebsites.net/api`, {\n      httpClient: new CustomHttpClient(console),\n    })\n    .configureLogging(SignalR.LogLevel.Information)\n    .build();\n\n  connection.on(\"playerConnected\", (otherId) => {\n    console.log(\"Player joined!\", otherId);\n    delegate.playerConnected(otherId);\n  });\n\n  connection.on(\"playerDisconnected\", (otherId) => {\n    console.log(\"Player left!\", otherId);\n    delegate.playerDisconnected(otherId);\n  });\n\n  connection.on(\"chatMessage\", (otherId, message) => {\n    console.log(otherId, message);\n    if (otherId === userId) return;\n    delegate.chatMessageReceived(otherId, message);\n  });\n\n  connection.on(\"playerEntered\", (otherId, from) => {\n    if (otherId === userId) return;\n    delegate.playerEntered(otherId, from);\n  });\n\n  connection.on(\"playerLeft\", (otherId, to) => {\n    if (otherId === userId) return;\n    delegate.playerLeft(otherId, to);\n  });\n\n  connection.onclose(() => {\n    console.log(\"disconnected\");\n    callAzureFunction(\"disconnect\");\n  });\n\n  window.addEventListener(\"beforeunload\", (e) => {\n    callAzureFunction(\"disconnect\");\n  });\n\n  console.log(\"connecting...\");\n  return await connection\n    .start()\n    .then(() => console.log(\"Connected!\"))\n    .catch(console.error);\n}\n\nasync function callAzureFunction(\n  endpoint: string,\n  body?: any,\n  options?: Partial<RequestInit>\n): Promise<any> {\n  let opts = {\n    method: \"POST\",\n    credentials: \"include\" as RequestCredentials, // sigh\n    ...options,\n  };\n\n  opts.body = JSON.stringify({ ...(body || {}), userId: myUserId });\n\n  return fetch(`https://mud.azurewebsites.net/api/${endpoint}`, opts).then(\n    (r) => {\n      if (r.ok) {\n        console.log(\"Updated\", r);\n      } else {\n        console.error(\"Update failed\", r);\n      }\n\n      return r.json();\n    }\n  );\n}\n","import {\n  connect,\n  NetworkingDelegate,\n  sendChatMessage,\n  moveToRoom,\n} from \"./networking\";\n\nlet currentOtherPlayers: string[] = [];\n\nfunction renderPresence(users: string[]) {\n  console.log(\"Rendering presence\", users);\n  users = users.filter((u) => u !== localStorage.getItem(\"name\"));\n  let names = \"\";\n\n  if (users.length === 0) {\n    document.getElementById(\"dynamic-room-description\").innerText =\n      \"You are all alone here.\";\n    return;\n  }\n\n  if (users.length === 1) {\n    names = users[0];\n  } else if (users.length === 2) {\n    names = `${users[0]} and ${users[1]}`;\n  } else {\n    names = `${users.slice(0, users.length - 1).join(\", \")}, and ${\n      users[users.length - 1]\n    }`;\n  }\n  document.getElementById(\"dynamic-room-description\").innerHTML = `Also here ${\n    users.length === 1 ? \"is\" : \"are\"\n  } ${names}`;\n}\n\nconst delegate: NetworkingDelegate = {\n  updatedRoom: (name: string, description: string) => {\n    const complexLinkRegex = /\\[\\[([^\\]]*?)\\-\\>([^\\]]*?)\\]\\]/g;\n    const simpleLinkRegex = /\\[\\[(.+?)\\]\\]/g;\n\n    console.log(\"Updating room\", name, description);\n    description = description.replace(\n      complexLinkRegex,\n      (match, text, roomId) => {\n        console.log(\"Replacing complex\", match, text, roomId);\n        return `<a class='room-link' href='#' data-room='${roomId}'>${text}</a>`;\n      }\n    );\n\n    description = description.replace(simpleLinkRegex, (match, roomId) => {\n      console.log(\"Replacing simple\", match, roomId);\n      return `<a class='room-link' href='#' data-room='${roomId}'>${roomId}</a>`;\n    });\n\n    document.getElementById(\"room-name\").innerText = name;\n    document.getElementById(\"static-room-description\").innerHTML = description;\n\n    document\n      .querySelectorAll(\"#static-room-description .room-link\")\n      .forEach((el) =>\n        el.addEventListener(\"click\", (e) => {\n          const roomId = el.getAttribute(\"data-room\");\n          moveToRoom(roomId);\n        })\n      );\n  },\n\n  updatedPresenceInfo: (users: string[]) => {\n    currentOtherPlayers = users;\n    renderPresence(users);\n  },\n\n  playerConnected: (name: string) => {\n    console.log(\"In playerJoined\", name);\n    if (currentOtherPlayers.indexOf(name) === -1) {\n      currentOtherPlayers.push(name);\n      displayChatMessage(`<strong>${name}</strong> has joined.`);\n    }\n\n    renderPresence(currentOtherPlayers);\n  },\n\n  playerDisconnected: (name: string) => {\n    displayChatMessage(`<strong>${name}</strong> has left.`);\n    currentOtherPlayers = currentOtherPlayers.filter((p) => p !== name);\n    renderPresence(currentOtherPlayers);\n  },\n\n  playerEntered: (name: string, from: string) => {\n    console.log(\"In playerJoined\", name);\n    if (currentOtherPlayers.indexOf(name) === -1) {\n      currentOtherPlayers.push(name);\n      displayChatMessage(`<strong>${name}</strong> walks in from ${from}.`);\n    }\n\n    renderPresence(currentOtherPlayers);\n  },\n\n  playerLeft: (name: string, to: string) => {\n    displayChatMessage(`<strong>${name}</strong> wanders to ${to}.`);\n    currentOtherPlayers = currentOtherPlayers.filter((p) => p !== name);\n    renderPresence(currentOtherPlayers);\n  },\n\n  chatMessageReceived: (name: string, message: string) => {\n    displayChatMessage(message, name);\n  },\n};\n\nconst sendMessage = () => {\n  const input: HTMLInputElement = document.querySelector(\"#chat-input\");\n  const text = input.value;\n\n  if (text === \"\" || text === undefined) return;\n\n  sendChatMessage(text);\n  delegate.chatMessageReceived(localStorage.getItem(\"name\"), text);\n\n  input.value = \"\";\n};\n\nconst displayChatMessage = (msg: string, name?: string) => {\n  const el = document.createElement(\"div\");\n\n  if (name) {\n    el.innerHTML = `<strong>${name}:</strong> ${msg}`;\n  } else {\n    el.innerHTML = msg;\n  }\n\n  document.getElementById(\"messages\").append(el);\n  el.scrollIntoView();\n};\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  let name = localStorage.getItem(\"name\");\n  if (!name) {\n    name = prompt(\"What is your user ID?\");\n    localStorage.setItem(\"name\", name);\n  }\n  connect(name, delegate);\n\n  document.getElementById(\"send\").addEventListener(\"click\", sendMessage);\n  document.addEventListener(\"keypress\", (e) => {\n    if (e.code === \"Enter\") {\n      sendMessage();\n    }\n  });\n});\n"]}